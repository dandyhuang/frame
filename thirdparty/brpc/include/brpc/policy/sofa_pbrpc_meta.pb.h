// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/policy/sofa_pbrpc_meta.proto

#ifndef PROTOBUF_INCLUDED_brpc_2fpolicy_2fsofa_5fpbrpc_5fmeta_2eproto
#define PROTOBUF_INCLUDED_brpc_2fpolicy_2fsofa_5fpbrpc_5fmeta_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_brpc_2fpolicy_2fsofa_5fpbrpc_5fmeta_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_brpc_2fpolicy_2fsofa_5fpbrpc_5fmeta_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_brpc_2fpolicy_2fsofa_5fpbrpc_5fmeta_2eproto();
namespace brpc {
namespace policy {
class SofaRpcMeta;
class SofaRpcMetaDefaultTypeInternal;
extern SofaRpcMetaDefaultTypeInternal _SofaRpcMeta_default_instance_;
}  // namespace policy
}  // namespace brpc
namespace google {
namespace protobuf {
template<> ::brpc::policy::SofaRpcMeta* Arena::CreateMaybeMessage<::brpc::policy::SofaRpcMeta>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace brpc {
namespace policy {

enum SofaRpcMeta_Type {
  SofaRpcMeta_Type_REQUEST = 0,
  SofaRpcMeta_Type_RESPONSE = 1
};
bool SofaRpcMeta_Type_IsValid(int value);
const SofaRpcMeta_Type SofaRpcMeta_Type_Type_MIN = SofaRpcMeta_Type_REQUEST;
const SofaRpcMeta_Type SofaRpcMeta_Type_Type_MAX = SofaRpcMeta_Type_RESPONSE;
const int SofaRpcMeta_Type_Type_ARRAYSIZE = SofaRpcMeta_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* SofaRpcMeta_Type_descriptor();
inline const ::std::string& SofaRpcMeta_Type_Name(SofaRpcMeta_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    SofaRpcMeta_Type_descriptor(), value);
}
inline bool SofaRpcMeta_Type_Parse(
    const ::std::string& name, SofaRpcMeta_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SofaRpcMeta_Type>(
    SofaRpcMeta_Type_descriptor(), name, value);
}
enum SofaCompressType {
  SOFA_COMPRESS_TYPE_NONE = 0,
  SOFA_COMPRESS_TYPE_GZIP = 1,
  SOFA_COMPRESS_TYPE_ZLIB = 2,
  SOFA_COMPRESS_TYPE_SNAPPY = 3,
  SOFA_COMPRESS_TYPE_LZ4 = 4
};
bool SofaCompressType_IsValid(int value);
const SofaCompressType SofaCompressType_MIN = SOFA_COMPRESS_TYPE_NONE;
const SofaCompressType SofaCompressType_MAX = SOFA_COMPRESS_TYPE_LZ4;
const int SofaCompressType_ARRAYSIZE = SofaCompressType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SofaCompressType_descriptor();
inline const ::std::string& SofaCompressType_Name(SofaCompressType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SofaCompressType_descriptor(), value);
}
inline bool SofaCompressType_Parse(
    const ::std::string& name, SofaCompressType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SofaCompressType>(
    SofaCompressType_descriptor(), name, value);
}
// ===================================================================

class SofaRpcMeta :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brpc.policy.SofaRpcMeta) */ {
 public:
  SofaRpcMeta();
  virtual ~SofaRpcMeta();

  SofaRpcMeta(const SofaRpcMeta& from);

  inline SofaRpcMeta& operator=(const SofaRpcMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SofaRpcMeta(SofaRpcMeta&& from) noexcept
    : SofaRpcMeta() {
    *this = ::std::move(from);
  }

  inline SofaRpcMeta& operator=(SofaRpcMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SofaRpcMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SofaRpcMeta* internal_default_instance() {
    return reinterpret_cast<const SofaRpcMeta*>(
               &_SofaRpcMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SofaRpcMeta* other);
  friend void swap(SofaRpcMeta& a, SofaRpcMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SofaRpcMeta* New() const final {
    return CreateMaybeMessage<SofaRpcMeta>(nullptr);
  }

  SofaRpcMeta* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SofaRpcMeta>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SofaRpcMeta& from);
  void MergeFrom(const SofaRpcMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SofaRpcMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SofaRpcMeta_Type Type;
  static const Type REQUEST =
    SofaRpcMeta_Type_REQUEST;
  static const Type RESPONSE =
    SofaRpcMeta_Type_RESPONSE;
  static inline bool Type_IsValid(int value) {
    return SofaRpcMeta_Type_IsValid(value);
  }
  static const Type Type_MIN =
    SofaRpcMeta_Type_Type_MIN;
  static const Type Type_MAX =
    SofaRpcMeta_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    SofaRpcMeta_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return SofaRpcMeta_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return SofaRpcMeta_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return SofaRpcMeta_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string method = 100;
  bool has_method() const;
  void clear_method();
  static const int kMethodFieldNumber = 100;
  const ::std::string& method() const;
  void set_method(const ::std::string& value);
  #if LANG_CXX11
  void set_method(::std::string&& value);
  #endif
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  ::std::string* mutable_method();
  ::std::string* release_method();
  void set_allocated_method(::std::string* method);

  // optional string reason = 202;
  bool has_reason() const;
  void clear_reason();
  static const int kReasonFieldNumber = 202;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // required uint64 sequence_id = 2;
  bool has_sequence_id() const;
  void clear_sequence_id();
  static const int kSequenceIdFieldNumber = 2;
  ::google::protobuf::uint64 sequence_id() const;
  void set_sequence_id(::google::protobuf::uint64 value);

  // optional .brpc.policy.SofaCompressType expected_response_compress_type = 301;
  bool has_expected_response_compress_type() const;
  void clear_expected_response_compress_type();
  static const int kExpectedResponseCompressTypeFieldNumber = 301;
  ::brpc::policy::SofaCompressType expected_response_compress_type() const;
  void set_expected_response_compress_type(::brpc::policy::SofaCompressType value);

  // required .brpc.policy.SofaRpcMeta.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::brpc::policy::SofaRpcMeta_Type type() const;
  void set_type(::brpc::policy::SofaRpcMeta_Type value);

  // optional bool failed = 200;
  bool has_failed() const;
  void clear_failed();
  static const int kFailedFieldNumber = 200;
  bool failed() const;
  void set_failed(bool value);

  // optional int32 error_code = 201;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 201;
  ::google::protobuf::int32 error_code() const;
  void set_error_code(::google::protobuf::int32 value);

  // optional .brpc.policy.SofaCompressType compress_type = 300;
  bool has_compress_type() const;
  void clear_compress_type();
  static const int kCompressTypeFieldNumber = 300;
  ::brpc::policy::SofaCompressType compress_type() const;
  void set_compress_type(::brpc::policy::SofaCompressType value);

  // @@protoc_insertion_point(class_scope:brpc.policy.SofaRpcMeta)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr method_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  ::google::protobuf::uint64 sequence_id_;
  int expected_response_compress_type_;
  int type_;
  bool failed_;
  ::google::protobuf::int32 error_code_;
  int compress_type_;
  friend struct ::TableStruct_brpc_2fpolicy_2fsofa_5fpbrpc_5fmeta_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SofaRpcMeta

// required .brpc.policy.SofaRpcMeta.Type type = 1;
inline bool SofaRpcMeta::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SofaRpcMeta::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::brpc::policy::SofaRpcMeta_Type SofaRpcMeta::type() const {
  // @@protoc_insertion_point(field_get:brpc.policy.SofaRpcMeta.type)
  return static_cast< ::brpc::policy::SofaRpcMeta_Type >(type_);
}
inline void SofaRpcMeta::set_type(::brpc::policy::SofaRpcMeta_Type value) {
  assert(::brpc::policy::SofaRpcMeta_Type_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.SofaRpcMeta.type)
}

// required uint64 sequence_id = 2;
inline bool SofaRpcMeta::has_sequence_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SofaRpcMeta::clear_sequence_id() {
  sequence_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 SofaRpcMeta::sequence_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.SofaRpcMeta.sequence_id)
  return sequence_id_;
}
inline void SofaRpcMeta::set_sequence_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  sequence_id_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.SofaRpcMeta.sequence_id)
}

// optional string method = 100;
inline bool SofaRpcMeta::has_method() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SofaRpcMeta::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& SofaRpcMeta::method() const {
  // @@protoc_insertion_point(field_get:brpc.policy.SofaRpcMeta.method)
  return method_.GetNoArena();
}
inline void SofaRpcMeta::set_method(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.policy.SofaRpcMeta.method)
}
#if LANG_CXX11
inline void SofaRpcMeta::set_method(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  method_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:brpc.policy.SofaRpcMeta.method)
}
#endif
inline void SofaRpcMeta::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.policy.SofaRpcMeta.method)
}
inline void SofaRpcMeta::set_method(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.SofaRpcMeta.method)
}
inline ::std::string* SofaRpcMeta::mutable_method() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:brpc.policy.SofaRpcMeta.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SofaRpcMeta::release_method() {
  // @@protoc_insertion_point(field_release:brpc.policy.SofaRpcMeta.method)
  if (!has_method()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return method_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SofaRpcMeta::set_allocated_method(::std::string* method) {
  if (method != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.SofaRpcMeta.method)
}

// optional bool failed = 200;
inline bool SofaRpcMeta::has_failed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SofaRpcMeta::clear_failed() {
  failed_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool SofaRpcMeta::failed() const {
  // @@protoc_insertion_point(field_get:brpc.policy.SofaRpcMeta.failed)
  return failed_;
}
inline void SofaRpcMeta::set_failed(bool value) {
  _has_bits_[0] |= 0x00000020u;
  failed_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.SofaRpcMeta.failed)
}

// optional int32 error_code = 201;
inline bool SofaRpcMeta::has_error_code() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SofaRpcMeta::clear_error_code() {
  error_code_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::int32 SofaRpcMeta::error_code() const {
  // @@protoc_insertion_point(field_get:brpc.policy.SofaRpcMeta.error_code)
  return error_code_;
}
inline void SofaRpcMeta::set_error_code(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  error_code_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.SofaRpcMeta.error_code)
}

// optional string reason = 202;
inline bool SofaRpcMeta::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SofaRpcMeta::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& SofaRpcMeta::reason() const {
  // @@protoc_insertion_point(field_get:brpc.policy.SofaRpcMeta.reason)
  return reason_.GetNoArena();
}
inline void SofaRpcMeta::set_reason(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.policy.SofaRpcMeta.reason)
}
#if LANG_CXX11
inline void SofaRpcMeta::set_reason(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:brpc.policy.SofaRpcMeta.reason)
}
#endif
inline void SofaRpcMeta::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.policy.SofaRpcMeta.reason)
}
inline void SofaRpcMeta::set_reason(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.SofaRpcMeta.reason)
}
inline ::std::string* SofaRpcMeta::mutable_reason() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:brpc.policy.SofaRpcMeta.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SofaRpcMeta::release_reason() {
  // @@protoc_insertion_point(field_release:brpc.policy.SofaRpcMeta.reason)
  if (!has_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return reason_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SofaRpcMeta::set_allocated_reason(::std::string* reason) {
  if (reason != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.SofaRpcMeta.reason)
}

// optional .brpc.policy.SofaCompressType compress_type = 300;
inline bool SofaRpcMeta::has_compress_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SofaRpcMeta::clear_compress_type() {
  compress_type_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::brpc::policy::SofaCompressType SofaRpcMeta::compress_type() const {
  // @@protoc_insertion_point(field_get:brpc.policy.SofaRpcMeta.compress_type)
  return static_cast< ::brpc::policy::SofaCompressType >(compress_type_);
}
inline void SofaRpcMeta::set_compress_type(::brpc::policy::SofaCompressType value) {
  assert(::brpc::policy::SofaCompressType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  compress_type_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.SofaRpcMeta.compress_type)
}

// optional .brpc.policy.SofaCompressType expected_response_compress_type = 301;
inline bool SofaRpcMeta::has_expected_response_compress_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SofaRpcMeta::clear_expected_response_compress_type() {
  expected_response_compress_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::brpc::policy::SofaCompressType SofaRpcMeta::expected_response_compress_type() const {
  // @@protoc_insertion_point(field_get:brpc.policy.SofaRpcMeta.expected_response_compress_type)
  return static_cast< ::brpc::policy::SofaCompressType >(expected_response_compress_type_);
}
inline void SofaRpcMeta::set_expected_response_compress_type(::brpc::policy::SofaCompressType value) {
  assert(::brpc::policy::SofaCompressType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  expected_response_compress_type_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.SofaRpcMeta.expected_response_compress_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace policy
}  // namespace brpc

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::brpc::policy::SofaRpcMeta_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::brpc::policy::SofaRpcMeta_Type>() {
  return ::brpc::policy::SofaRpcMeta_Type_descriptor();
}
template <> struct is_proto_enum< ::brpc::policy::SofaCompressType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::brpc::policy::SofaCompressType>() {
  return ::brpc::policy::SofaCompressType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_brpc_2fpolicy_2fsofa_5fpbrpc_5fmeta_2eproto
