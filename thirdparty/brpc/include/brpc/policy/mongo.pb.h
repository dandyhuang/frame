// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/policy/mongo.proto

#ifndef PROTOBUF_INCLUDED_brpc_2fpolicy_2fmongo_2eproto
#define PROTOBUF_INCLUDED_brpc_2fpolicy_2fmongo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_brpc_2fpolicy_2fmongo_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_brpc_2fpolicy_2fmongo_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_brpc_2fpolicy_2fmongo_2eproto();
namespace brpc {
namespace policy {
class MongoHeader;
class MongoHeaderDefaultTypeInternal;
extern MongoHeaderDefaultTypeInternal _MongoHeader_default_instance_;
class MongoRequest;
class MongoRequestDefaultTypeInternal;
extern MongoRequestDefaultTypeInternal _MongoRequest_default_instance_;
class MongoResponse;
class MongoResponseDefaultTypeInternal;
extern MongoResponseDefaultTypeInternal _MongoResponse_default_instance_;
}  // namespace policy
}  // namespace brpc
namespace google {
namespace protobuf {
template<> ::brpc::policy::MongoHeader* Arena::CreateMaybeMessage<::brpc::policy::MongoHeader>(Arena*);
template<> ::brpc::policy::MongoRequest* Arena::CreateMaybeMessage<::brpc::policy::MongoRequest>(Arena*);
template<> ::brpc::policy::MongoResponse* Arena::CreateMaybeMessage<::brpc::policy::MongoResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace brpc {
namespace policy {

enum MongoOp {
  OPREPLY = 1,
  DBMSG = 1000,
  DB_UPDATE = 2001,
  DB_INSERT = 2002,
  DB_QUERY = 2004,
  DB_GETMORE = 2005,
  DB_DELETE = 2006,
  DB_KILLCURSORS = 2007,
  DB_COMMAND = 2008,
  DB_COMMANDREPLY = 2009
};
bool MongoOp_IsValid(int value);
const MongoOp MongoOp_MIN = OPREPLY;
const MongoOp MongoOp_MAX = DB_COMMANDREPLY;
const int MongoOp_ARRAYSIZE = MongoOp_MAX + 1;

const ::google::protobuf::EnumDescriptor* MongoOp_descriptor();
inline const ::std::string& MongoOp_Name(MongoOp value) {
  return ::google::protobuf::internal::NameOfEnum(
    MongoOp_descriptor(), value);
}
inline bool MongoOp_Parse(
    const ::std::string& name, MongoOp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MongoOp>(
    MongoOp_descriptor(), name, value);
}
// ===================================================================

class MongoHeader :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brpc.policy.MongoHeader) */ {
 public:
  MongoHeader();
  virtual ~MongoHeader();

  MongoHeader(const MongoHeader& from);

  inline MongoHeader& operator=(const MongoHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MongoHeader(MongoHeader&& from) noexcept
    : MongoHeader() {
    *this = ::std::move(from);
  }

  inline MongoHeader& operator=(MongoHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MongoHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MongoHeader* internal_default_instance() {
    return reinterpret_cast<const MongoHeader*>(
               &_MongoHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MongoHeader* other);
  friend void swap(MongoHeader& a, MongoHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MongoHeader* New() const final {
    return CreateMaybeMessage<MongoHeader>(nullptr);
  }

  MongoHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MongoHeader>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MongoHeader& from);
  void MergeFrom(const MongoHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MongoHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 message_length = 1;
  bool has_message_length() const;
  void clear_message_length();
  static const int kMessageLengthFieldNumber = 1;
  ::google::protobuf::int32 message_length() const;
  void set_message_length(::google::protobuf::int32 value);

  // required int32 request_id = 2;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 2;
  ::google::protobuf::int32 request_id() const;
  void set_request_id(::google::protobuf::int32 value);

  // required int32 response_to = 3;
  bool has_response_to() const;
  void clear_response_to();
  static const int kResponseToFieldNumber = 3;
  ::google::protobuf::int32 response_to() const;
  void set_response_to(::google::protobuf::int32 value);

  // required .brpc.policy.MongoOp op_code = 4;
  bool has_op_code() const;
  void clear_op_code();
  static const int kOpCodeFieldNumber = 4;
  ::brpc::policy::MongoOp op_code() const;
  void set_op_code(::brpc::policy::MongoOp value);

  // @@protoc_insertion_point(class_scope:brpc.policy.MongoHeader)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 message_length_;
  ::google::protobuf::int32 request_id_;
  ::google::protobuf::int32 response_to_;
  int op_code_;
  friend struct ::TableStruct_brpc_2fpolicy_2fmongo_2eproto;
};
// -------------------------------------------------------------------

class MongoRequest :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brpc.policy.MongoRequest) */ {
 public:
  MongoRequest();
  virtual ~MongoRequest();

  MongoRequest(const MongoRequest& from);

  inline MongoRequest& operator=(const MongoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MongoRequest(MongoRequest&& from) noexcept
    : MongoRequest() {
    *this = ::std::move(from);
  }

  inline MongoRequest& operator=(MongoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MongoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MongoRequest* internal_default_instance() {
    return reinterpret_cast<const MongoRequest*>(
               &_MongoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(MongoRequest* other);
  friend void swap(MongoRequest& a, MongoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MongoRequest* New() const final {
    return CreateMaybeMessage<MongoRequest>(nullptr);
  }

  MongoRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MongoRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MongoRequest& from);
  void MergeFrom(const MongoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MongoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string message = 2;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // required .brpc.policy.MongoHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::brpc::policy::MongoHeader& header() const;
  ::brpc::policy::MongoHeader* release_header();
  ::brpc::policy::MongoHeader* mutable_header();
  void set_allocated_header(::brpc::policy::MongoHeader* header);

  // @@protoc_insertion_point(class_scope:brpc.policy.MongoRequest)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::brpc::policy::MongoHeader* header_;
  friend struct ::TableStruct_brpc_2fpolicy_2fmongo_2eproto;
};
// -------------------------------------------------------------------

class MongoResponse :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brpc.policy.MongoResponse) */ {
 public:
  MongoResponse();
  virtual ~MongoResponse();

  MongoResponse(const MongoResponse& from);

  inline MongoResponse& operator=(const MongoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MongoResponse(MongoResponse&& from) noexcept
    : MongoResponse() {
    *this = ::std::move(from);
  }

  inline MongoResponse& operator=(MongoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MongoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MongoResponse* internal_default_instance() {
    return reinterpret_cast<const MongoResponse*>(
               &_MongoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(MongoResponse* other);
  friend void swap(MongoResponse& a, MongoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MongoResponse* New() const final {
    return CreateMaybeMessage<MongoResponse>(nullptr);
  }

  MongoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MongoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MongoResponse& from);
  void MergeFrom(const MongoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MongoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string message = 6;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 6;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // required .brpc.policy.MongoHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::brpc::policy::MongoHeader& header() const;
  ::brpc::policy::MongoHeader* release_header();
  ::brpc::policy::MongoHeader* mutable_header();
  void set_allocated_header(::brpc::policy::MongoHeader* header);

  // required int64 cursor_id = 3;
  bool has_cursor_id() const;
  void clear_cursor_id();
  static const int kCursorIdFieldNumber = 3;
  ::google::protobuf::int64 cursor_id() const;
  void set_cursor_id(::google::protobuf::int64 value);

  // required int32 response_flags = 2;
  bool has_response_flags() const;
  void clear_response_flags();
  static const int kResponseFlagsFieldNumber = 2;
  ::google::protobuf::int32 response_flags() const;
  void set_response_flags(::google::protobuf::int32 value);

  // required int32 starting_from = 4;
  bool has_starting_from() const;
  void clear_starting_from();
  static const int kStartingFromFieldNumber = 4;
  ::google::protobuf::int32 starting_from() const;
  void set_starting_from(::google::protobuf::int32 value);

  // required int32 number_returned = 5;
  bool has_number_returned() const;
  void clear_number_returned();
  static const int kNumberReturnedFieldNumber = 5;
  ::google::protobuf::int32 number_returned() const;
  void set_number_returned(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:brpc.policy.MongoResponse)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::brpc::policy::MongoHeader* header_;
  ::google::protobuf::int64 cursor_id_;
  ::google::protobuf::int32 response_flags_;
  ::google::protobuf::int32 starting_from_;
  ::google::protobuf::int32 number_returned_;
  friend struct ::TableStruct_brpc_2fpolicy_2fmongo_2eproto;
};
// ===================================================================

class MongoService_Stub;

class MongoService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline MongoService() {};
 public:
  virtual ~MongoService();

  typedef MongoService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void default_method(::google::protobuf::RpcController* controller,
                       const ::brpc::policy::MongoRequest* request,
                       ::brpc::policy::MongoResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MongoService);
};

class MongoService_Stub : public MongoService {
 public:
  MongoService_Stub(::google::protobuf::RpcChannel* channel);
  MongoService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~MongoService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements MongoService ------------------------------------------

  void default_method(::google::protobuf::RpcController* controller,
                       const ::brpc::policy::MongoRequest* request,
                       ::brpc::policy::MongoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MongoService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MongoHeader

// required int32 message_length = 1;
inline bool MongoHeader::has_message_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MongoHeader::clear_message_length() {
  message_length_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::int32 MongoHeader::message_length() const {
  // @@protoc_insertion_point(field_get:brpc.policy.MongoHeader.message_length)
  return message_length_;
}
inline void MongoHeader::set_message_length(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  message_length_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.MongoHeader.message_length)
}

// required int32 request_id = 2;
inline bool MongoHeader::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MongoHeader::clear_request_id() {
  request_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::int32 MongoHeader::request_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.MongoHeader.request_id)
  return request_id_;
}
inline void MongoHeader::set_request_id(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  request_id_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.MongoHeader.request_id)
}

// required int32 response_to = 3;
inline bool MongoHeader::has_response_to() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MongoHeader::clear_response_to() {
  response_to_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int32 MongoHeader::response_to() const {
  // @@protoc_insertion_point(field_get:brpc.policy.MongoHeader.response_to)
  return response_to_;
}
inline void MongoHeader::set_response_to(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  response_to_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.MongoHeader.response_to)
}

// required .brpc.policy.MongoOp op_code = 4;
inline bool MongoHeader::has_op_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MongoHeader::clear_op_code() {
  op_code_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::brpc::policy::MongoOp MongoHeader::op_code() const {
  // @@protoc_insertion_point(field_get:brpc.policy.MongoHeader.op_code)
  return static_cast< ::brpc::policy::MongoOp >(op_code_);
}
inline void MongoHeader::set_op_code(::brpc::policy::MongoOp value) {
  assert(::brpc::policy::MongoOp_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  op_code_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.MongoHeader.op_code)
}

// -------------------------------------------------------------------

// MongoRequest

// required .brpc.policy.MongoHeader header = 1;
inline bool MongoRequest::has_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MongoRequest::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::brpc::policy::MongoHeader& MongoRequest::header() const {
  const ::brpc::policy::MongoHeader* p = header_;
  // @@protoc_insertion_point(field_get:brpc.policy.MongoRequest.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::brpc::policy::MongoHeader*>(
      &::brpc::policy::_MongoHeader_default_instance_);
}
inline ::brpc::policy::MongoHeader* MongoRequest::release_header() {
  // @@protoc_insertion_point(field_release:brpc.policy.MongoRequest.header)
  _has_bits_[0] &= ~0x00000002u;
  ::brpc::policy::MongoHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::brpc::policy::MongoHeader* MongoRequest::mutable_header() {
  _has_bits_[0] |= 0x00000002u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::brpc::policy::MongoHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:brpc.policy.MongoRequest.header)
  return header_;
}
inline void MongoRequest::set_allocated_header(::brpc::policy::MongoHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.MongoRequest.header)
}

// required string message = 2;
inline bool MongoRequest::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MongoRequest::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& MongoRequest::message() const {
  // @@protoc_insertion_point(field_get:brpc.policy.MongoRequest.message)
  return message_.GetNoArena();
}
inline void MongoRequest::set_message(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.policy.MongoRequest.message)
}
#if LANG_CXX11
inline void MongoRequest::set_message(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:brpc.policy.MongoRequest.message)
}
#endif
inline void MongoRequest::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.policy.MongoRequest.message)
}
inline void MongoRequest::set_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.MongoRequest.message)
}
inline ::std::string* MongoRequest::mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:brpc.policy.MongoRequest.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MongoRequest::release_message() {
  // @@protoc_insertion_point(field_release:brpc.policy.MongoRequest.message)
  if (!has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MongoRequest::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.MongoRequest.message)
}

// -------------------------------------------------------------------

// MongoResponse

// required .brpc.policy.MongoHeader header = 1;
inline bool MongoResponse::has_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MongoResponse::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::brpc::policy::MongoHeader& MongoResponse::header() const {
  const ::brpc::policy::MongoHeader* p = header_;
  // @@protoc_insertion_point(field_get:brpc.policy.MongoResponse.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::brpc::policy::MongoHeader*>(
      &::brpc::policy::_MongoHeader_default_instance_);
}
inline ::brpc::policy::MongoHeader* MongoResponse::release_header() {
  // @@protoc_insertion_point(field_release:brpc.policy.MongoResponse.header)
  _has_bits_[0] &= ~0x00000002u;
  ::brpc::policy::MongoHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::brpc::policy::MongoHeader* MongoResponse::mutable_header() {
  _has_bits_[0] |= 0x00000002u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::brpc::policy::MongoHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:brpc.policy.MongoResponse.header)
  return header_;
}
inline void MongoResponse::set_allocated_header(::brpc::policy::MongoHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.MongoResponse.header)
}

// required int32 response_flags = 2;
inline bool MongoResponse::has_response_flags() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MongoResponse::clear_response_flags() {
  response_flags_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::int32 MongoResponse::response_flags() const {
  // @@protoc_insertion_point(field_get:brpc.policy.MongoResponse.response_flags)
  return response_flags_;
}
inline void MongoResponse::set_response_flags(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  response_flags_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.MongoResponse.response_flags)
}

// required int64 cursor_id = 3;
inline bool MongoResponse::has_cursor_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MongoResponse::clear_cursor_id() {
  cursor_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int64 MongoResponse::cursor_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.MongoResponse.cursor_id)
  return cursor_id_;
}
inline void MongoResponse::set_cursor_id(::google::protobuf::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  cursor_id_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.MongoResponse.cursor_id)
}

// required int32 starting_from = 4;
inline bool MongoResponse::has_starting_from() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MongoResponse::clear_starting_from() {
  starting_from_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::int32 MongoResponse::starting_from() const {
  // @@protoc_insertion_point(field_get:brpc.policy.MongoResponse.starting_from)
  return starting_from_;
}
inline void MongoResponse::set_starting_from(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  starting_from_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.MongoResponse.starting_from)
}

// required int32 number_returned = 5;
inline bool MongoResponse::has_number_returned() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MongoResponse::clear_number_returned() {
  number_returned_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::int32 MongoResponse::number_returned() const {
  // @@protoc_insertion_point(field_get:brpc.policy.MongoResponse.number_returned)
  return number_returned_;
}
inline void MongoResponse::set_number_returned(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  number_returned_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.MongoResponse.number_returned)
}

// required string message = 6;
inline bool MongoResponse::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MongoResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& MongoResponse::message() const {
  // @@protoc_insertion_point(field_get:brpc.policy.MongoResponse.message)
  return message_.GetNoArena();
}
inline void MongoResponse::set_message(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.policy.MongoResponse.message)
}
#if LANG_CXX11
inline void MongoResponse::set_message(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:brpc.policy.MongoResponse.message)
}
#endif
inline void MongoResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.policy.MongoResponse.message)
}
inline void MongoResponse::set_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.MongoResponse.message)
}
inline ::std::string* MongoResponse::mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:brpc.policy.MongoResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MongoResponse::release_message() {
  // @@protoc_insertion_point(field_release:brpc.policy.MongoResponse.message)
  if (!has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MongoResponse::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.MongoResponse.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace policy
}  // namespace brpc

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::brpc::policy::MongoOp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::brpc::policy::MongoOp>() {
  return ::brpc::policy::MongoOp_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_brpc_2fpolicy_2fmongo_2eproto
