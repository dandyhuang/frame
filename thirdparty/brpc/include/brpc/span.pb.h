// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/span.proto

#ifndef PROTOBUF_INCLUDED_brpc_2fspan_2eproto
#define PROTOBUF_INCLUDED_brpc_2fspan_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "brpc/options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_brpc_2fspan_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_brpc_2fspan_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_brpc_2fspan_2eproto();
namespace brpc {
class BriefSpan;
class BriefSpanDefaultTypeInternal;
extern BriefSpanDefaultTypeInternal _BriefSpan_default_instance_;
class RpczSpan;
class RpczSpanDefaultTypeInternal;
extern RpczSpanDefaultTypeInternal _RpczSpan_default_instance_;
class SpanAnnotation;
class SpanAnnotationDefaultTypeInternal;
extern SpanAnnotationDefaultTypeInternal _SpanAnnotation_default_instance_;
class TracingSpan;
class TracingSpanDefaultTypeInternal;
extern TracingSpanDefaultTypeInternal _TracingSpan_default_instance_;
}  // namespace brpc
namespace google {
namespace protobuf {
template<> ::brpc::BriefSpan* Arena::CreateMaybeMessage<::brpc::BriefSpan>(Arena*);
template<> ::brpc::RpczSpan* Arena::CreateMaybeMessage<::brpc::RpczSpan>(Arena*);
template<> ::brpc::SpanAnnotation* Arena::CreateMaybeMessage<::brpc::SpanAnnotation>(Arena*);
template<> ::brpc::TracingSpan* Arena::CreateMaybeMessage<::brpc::TracingSpan>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace brpc {

enum SpanType {
  SPAN_TYPE_SERVER = 0,
  SPAN_TYPE_CLIENT = 1
};
bool SpanType_IsValid(int value);
const SpanType SpanType_MIN = SPAN_TYPE_SERVER;
const SpanType SpanType_MAX = SPAN_TYPE_CLIENT;
const int SpanType_ARRAYSIZE = SpanType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SpanType_descriptor();
inline const ::std::string& SpanType_Name(SpanType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SpanType_descriptor(), value);
}
inline bool SpanType_Parse(
    const ::std::string& name, SpanType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SpanType>(
    SpanType_descriptor(), name, value);
}
// ===================================================================

class RpczSpan :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brpc.RpczSpan) */ {
 public:
  RpczSpan();
  virtual ~RpczSpan();

  RpczSpan(const RpczSpan& from);

  inline RpczSpan& operator=(const RpczSpan& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RpczSpan(RpczSpan&& from) noexcept
    : RpczSpan() {
    *this = ::std::move(from);
  }

  inline RpczSpan& operator=(RpczSpan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RpczSpan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RpczSpan* internal_default_instance() {
    return reinterpret_cast<const RpczSpan*>(
               &_RpczSpan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RpczSpan* other);
  friend void swap(RpczSpan& a, RpczSpan& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RpczSpan* New() const final {
    return CreateMaybeMessage<RpczSpan>(nullptr);
  }

  RpczSpan* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RpczSpan>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RpczSpan& from);
  void MergeFrom(const RpczSpan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpczSpan* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .brpc.RpczSpan client_spans = 21;
  int client_spans_size() const;
  void clear_client_spans();
  static const int kClientSpansFieldNumber = 21;
  ::brpc::RpczSpan* mutable_client_spans(int index);
  ::google::protobuf::RepeatedPtrField< ::brpc::RpczSpan >*
      mutable_client_spans();
  const ::brpc::RpczSpan& client_spans(int index) const;
  ::brpc::RpczSpan* add_client_spans();
  const ::google::protobuf::RepeatedPtrField< ::brpc::RpczSpan >&
      client_spans() const;

  // optional bytes info = 20;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 20;
  const ::std::string& info() const;
  void set_info(const ::std::string& value);
  #if LANG_CXX11
  void set_info(::std::string&& value);
  #endif
  void set_info(const char* value);
  void set_info(const void* value, size_t size);
  ::std::string* mutable_info();
  ::std::string* release_info();
  void set_allocated_info(::std::string* info);

  // optional bytes full_method_name = 22;
  bool has_full_method_name() const;
  void clear_full_method_name();
  static const int kFullMethodNameFieldNumber = 22;
  const ::std::string& full_method_name() const;
  void set_full_method_name(const ::std::string& value);
  #if LANG_CXX11
  void set_full_method_name(::std::string&& value);
  #endif
  void set_full_method_name(const char* value);
  void set_full_method_name(const void* value, size_t size);
  ::std::string* mutable_full_method_name();
  ::std::string* release_full_method_name();
  void set_allocated_full_method_name(::std::string* full_method_name);

  // required uint64 trace_id = 1;
  bool has_trace_id() const;
  void clear_trace_id();
  static const int kTraceIdFieldNumber = 1;
  ::google::protobuf::uint64 trace_id() const;
  void set_trace_id(::google::protobuf::uint64 value);

  // required uint64 span_id = 2;
  bool has_span_id() const;
  void clear_span_id();
  static const int kSpanIdFieldNumber = 2;
  ::google::protobuf::uint64 span_id() const;
  void set_span_id(::google::protobuf::uint64 value);

  // required uint64 parent_span_id = 3;
  bool has_parent_span_id() const;
  void clear_parent_span_id();
  static const int kParentSpanIdFieldNumber = 3;
  ::google::protobuf::uint64 parent_span_id() const;
  void set_parent_span_id(::google::protobuf::uint64 value);

  // optional uint64 log_id = 4;
  bool has_log_id() const;
  void clear_log_id();
  static const int kLogIdFieldNumber = 4;
  ::google::protobuf::uint64 log_id() const;
  void set_log_id(::google::protobuf::uint64 value);

  // optional uint64 base_cid = 5;
  bool has_base_cid() const;
  void clear_base_cid();
  static const int kBaseCidFieldNumber = 5;
  ::google::protobuf::uint64 base_cid() const;
  void set_base_cid(::google::protobuf::uint64 value);

  // optional uint64 ending_cid = 6;
  bool has_ending_cid() const;
  void clear_ending_cid();
  static const int kEndingCidFieldNumber = 6;
  ::google::protobuf::uint64 ending_cid() const;
  void set_ending_cid(::google::protobuf::uint64 value);

  // optional uint32 remote_ip = 7;
  bool has_remote_ip() const;
  void clear_remote_ip();
  static const int kRemoteIpFieldNumber = 7;
  ::google::protobuf::uint32 remote_ip() const;
  void set_remote_ip(::google::protobuf::uint32 value);

  // optional uint32 remote_port = 8;
  bool has_remote_port() const;
  void clear_remote_port();
  static const int kRemotePortFieldNumber = 8;
  ::google::protobuf::uint32 remote_port() const;
  void set_remote_port(::google::protobuf::uint32 value);

  // optional .brpc.SpanType type = 9;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 9;
  ::brpc::SpanType type() const;
  void set_type(::brpc::SpanType value);

  // optional bool async = 10;
  bool has_async() const;
  void clear_async();
  static const int kAsyncFieldNumber = 10;
  bool async() const;
  void set_async(bool value);

  // optional .brpc.ProtocolType protocol = 11;
  bool has_protocol() const;
  void clear_protocol();
  static const int kProtocolFieldNumber = 11;
  ::brpc::ProtocolType protocol() const;
  void set_protocol(::brpc::ProtocolType value);

  // optional int32 error_code = 12;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 12;
  ::google::protobuf::int32 error_code() const;
  void set_error_code(::google::protobuf::int32 value);

  // optional int32 request_size = 13;
  bool has_request_size() const;
  void clear_request_size();
  static const int kRequestSizeFieldNumber = 13;
  ::google::protobuf::int32 request_size() const;
  void set_request_size(::google::protobuf::int32 value);

  // optional int32 response_size = 14;
  bool has_response_size() const;
  void clear_response_size();
  static const int kResponseSizeFieldNumber = 14;
  ::google::protobuf::int32 response_size() const;
  void set_response_size(::google::protobuf::int32 value);

  // optional int64 received_real_us = 15;
  bool has_received_real_us() const;
  void clear_received_real_us();
  static const int kReceivedRealUsFieldNumber = 15;
  ::google::protobuf::int64 received_real_us() const;
  void set_received_real_us(::google::protobuf::int64 value);

  // optional int64 start_parse_real_us = 16;
  bool has_start_parse_real_us() const;
  void clear_start_parse_real_us();
  static const int kStartParseRealUsFieldNumber = 16;
  ::google::protobuf::int64 start_parse_real_us() const;
  void set_start_parse_real_us(::google::protobuf::int64 value);

  // optional int64 start_callback_real_us = 17;
  bool has_start_callback_real_us() const;
  void clear_start_callback_real_us();
  static const int kStartCallbackRealUsFieldNumber = 17;
  ::google::protobuf::int64 start_callback_real_us() const;
  void set_start_callback_real_us(::google::protobuf::int64 value);

  // optional int64 start_send_real_us = 18;
  bool has_start_send_real_us() const;
  void clear_start_send_real_us();
  static const int kStartSendRealUsFieldNumber = 18;
  ::google::protobuf::int64 start_send_real_us() const;
  void set_start_send_real_us(::google::protobuf::int64 value);

  // optional int64 sent_real_us = 19;
  bool has_sent_real_us() const;
  void clear_sent_real_us();
  static const int kSentRealUsFieldNumber = 19;
  ::google::protobuf::int64 sent_real_us() const;
  void set_sent_real_us(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:brpc.RpczSpan)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::brpc::RpczSpan > client_spans_;
  ::google::protobuf::internal::ArenaStringPtr info_;
  ::google::protobuf::internal::ArenaStringPtr full_method_name_;
  ::google::protobuf::uint64 trace_id_;
  ::google::protobuf::uint64 span_id_;
  ::google::protobuf::uint64 parent_span_id_;
  ::google::protobuf::uint64 log_id_;
  ::google::protobuf::uint64 base_cid_;
  ::google::protobuf::uint64 ending_cid_;
  ::google::protobuf::uint32 remote_ip_;
  ::google::protobuf::uint32 remote_port_;
  int type_;
  bool async_;
  int protocol_;
  ::google::protobuf::int32 error_code_;
  ::google::protobuf::int32 request_size_;
  ::google::protobuf::int32 response_size_;
  ::google::protobuf::int64 received_real_us_;
  ::google::protobuf::int64 start_parse_real_us_;
  ::google::protobuf::int64 start_callback_real_us_;
  ::google::protobuf::int64 start_send_real_us_;
  ::google::protobuf::int64 sent_real_us_;
  friend struct ::TableStruct_brpc_2fspan_2eproto;
};
// -------------------------------------------------------------------

class BriefSpan :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brpc.BriefSpan) */ {
 public:
  BriefSpan();
  virtual ~BriefSpan();

  BriefSpan(const BriefSpan& from);

  inline BriefSpan& operator=(const BriefSpan& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BriefSpan(BriefSpan&& from) noexcept
    : BriefSpan() {
    *this = ::std::move(from);
  }

  inline BriefSpan& operator=(BriefSpan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BriefSpan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BriefSpan* internal_default_instance() {
    return reinterpret_cast<const BriefSpan*>(
               &_BriefSpan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(BriefSpan* other);
  friend void swap(BriefSpan& a, BriefSpan& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BriefSpan* New() const final {
    return CreateMaybeMessage<BriefSpan>(nullptr);
  }

  BriefSpan* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BriefSpan>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BriefSpan& from);
  void MergeFrom(const BriefSpan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BriefSpan* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes full_method_name = 10;
  bool has_full_method_name() const;
  void clear_full_method_name();
  static const int kFullMethodNameFieldNumber = 10;
  const ::std::string& full_method_name() const;
  void set_full_method_name(const ::std::string& value);
  #if LANG_CXX11
  void set_full_method_name(::std::string&& value);
  #endif
  void set_full_method_name(const char* value);
  void set_full_method_name(const void* value, size_t size);
  ::std::string* mutable_full_method_name();
  ::std::string* release_full_method_name();
  void set_allocated_full_method_name(::std::string* full_method_name);

  // required uint64 trace_id = 1;
  bool has_trace_id() const;
  void clear_trace_id();
  static const int kTraceIdFieldNumber = 1;
  ::google::protobuf::uint64 trace_id() const;
  void set_trace_id(::google::protobuf::uint64 value);

  // required uint64 span_id = 2;
  bool has_span_id() const;
  void clear_span_id();
  static const int kSpanIdFieldNumber = 2;
  ::google::protobuf::uint64 span_id() const;
  void set_span_id(::google::protobuf::uint64 value);

  // optional uint64 log_id = 3;
  bool has_log_id() const;
  void clear_log_id();
  static const int kLogIdFieldNumber = 3;
  ::google::protobuf::uint64 log_id() const;
  void set_log_id(::google::protobuf::uint64 value);

  // optional .brpc.SpanType type = 4;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::brpc::SpanType type() const;
  void set_type(::brpc::SpanType value);

  // optional int32 error_code = 5;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 5;
  ::google::protobuf::int32 error_code() const;
  void set_error_code(::google::protobuf::int32 value);

  // optional int32 request_size = 6;
  bool has_request_size() const;
  void clear_request_size();
  static const int kRequestSizeFieldNumber = 6;
  ::google::protobuf::int32 request_size() const;
  void set_request_size(::google::protobuf::int32 value);

  // optional int32 response_size = 7;
  bool has_response_size() const;
  void clear_response_size();
  static const int kResponseSizeFieldNumber = 7;
  ::google::protobuf::int32 response_size() const;
  void set_response_size(::google::protobuf::int32 value);

  // optional int64 start_real_us = 8;
  bool has_start_real_us() const;
  void clear_start_real_us();
  static const int kStartRealUsFieldNumber = 8;
  ::google::protobuf::int64 start_real_us() const;
  void set_start_real_us(::google::protobuf::int64 value);

  // optional int64 latency_us = 9;
  bool has_latency_us() const;
  void clear_latency_us();
  static const int kLatencyUsFieldNumber = 9;
  ::google::protobuf::int64 latency_us() const;
  void set_latency_us(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:brpc.BriefSpan)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr full_method_name_;
  ::google::protobuf::uint64 trace_id_;
  ::google::protobuf::uint64 span_id_;
  ::google::protobuf::uint64 log_id_;
  int type_;
  ::google::protobuf::int32 error_code_;
  ::google::protobuf::int32 request_size_;
  ::google::protobuf::int32 response_size_;
  ::google::protobuf::int64 start_real_us_;
  ::google::protobuf::int64 latency_us_;
  friend struct ::TableStruct_brpc_2fspan_2eproto;
};
// -------------------------------------------------------------------

class SpanAnnotation :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brpc.SpanAnnotation) */ {
 public:
  SpanAnnotation();
  virtual ~SpanAnnotation();

  SpanAnnotation(const SpanAnnotation& from);

  inline SpanAnnotation& operator=(const SpanAnnotation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpanAnnotation(SpanAnnotation&& from) noexcept
    : SpanAnnotation() {
    *this = ::std::move(from);
  }

  inline SpanAnnotation& operator=(SpanAnnotation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SpanAnnotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpanAnnotation* internal_default_instance() {
    return reinterpret_cast<const SpanAnnotation*>(
               &_SpanAnnotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SpanAnnotation* other);
  friend void swap(SpanAnnotation& a, SpanAnnotation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpanAnnotation* New() const final {
    return CreateMaybeMessage<SpanAnnotation>(nullptr);
  }

  SpanAnnotation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SpanAnnotation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SpanAnnotation& from);
  void MergeFrom(const SpanAnnotation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpanAnnotation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string content = 2;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // required int64 realtime_us = 1;
  bool has_realtime_us() const;
  void clear_realtime_us();
  static const int kRealtimeUsFieldNumber = 1;
  ::google::protobuf::int64 realtime_us() const;
  void set_realtime_us(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:brpc.SpanAnnotation)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::int64 realtime_us_;
  friend struct ::TableStruct_brpc_2fspan_2eproto;
};
// -------------------------------------------------------------------

class TracingSpan :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brpc.TracingSpan) */ {
 public:
  TracingSpan();
  virtual ~TracingSpan();

  TracingSpan(const TracingSpan& from);

  inline TracingSpan& operator=(const TracingSpan& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TracingSpan(TracingSpan&& from) noexcept
    : TracingSpan() {
    *this = ::std::move(from);
  }

  inline TracingSpan& operator=(TracingSpan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TracingSpan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TracingSpan* internal_default_instance() {
    return reinterpret_cast<const TracingSpan*>(
               &_TracingSpan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TracingSpan* other);
  friend void swap(TracingSpan& a, TracingSpan& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TracingSpan* New() const final {
    return CreateMaybeMessage<TracingSpan>(nullptr);
  }

  TracingSpan* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TracingSpan>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TracingSpan& from);
  void MergeFrom(const TracingSpan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TracingSpan* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .brpc.SpanAnnotation annotations = 18;
  int annotations_size() const;
  void clear_annotations();
  static const int kAnnotationsFieldNumber = 18;
  ::brpc::SpanAnnotation* mutable_annotations(int index);
  ::google::protobuf::RepeatedPtrField< ::brpc::SpanAnnotation >*
      mutable_annotations();
  const ::brpc::SpanAnnotation& annotations(int index) const;
  ::brpc::SpanAnnotation* add_annotations();
  const ::google::protobuf::RepeatedPtrField< ::brpc::SpanAnnotation >&
      annotations() const;

  // repeated .brpc.TracingSpan client_spans = 19;
  int client_spans_size() const;
  void clear_client_spans();
  static const int kClientSpansFieldNumber = 19;
  ::brpc::TracingSpan* mutable_client_spans(int index);
  ::google::protobuf::RepeatedPtrField< ::brpc::TracingSpan >*
      mutable_client_spans();
  const ::brpc::TracingSpan& client_spans(int index) const;
  ::brpc::TracingSpan* add_client_spans();
  const ::google::protobuf::RepeatedPtrField< ::brpc::TracingSpan >&
      client_spans() const;

  // optional string span_name = 17;
  bool has_span_name() const;
  void clear_span_name();
  static const int kSpanNameFieldNumber = 17;
  const ::std::string& span_name() const;
  void set_span_name(const ::std::string& value);
  #if LANG_CXX11
  void set_span_name(::std::string&& value);
  #endif
  void set_span_name(const char* value);
  void set_span_name(const char* value, size_t size);
  ::std::string* mutable_span_name();
  ::std::string* release_span_name();
  void set_allocated_span_name(::std::string* span_name);

  // required uint64 trace_id = 1;
  bool has_trace_id() const;
  void clear_trace_id();
  static const int kTraceIdFieldNumber = 1;
  ::google::protobuf::uint64 trace_id() const;
  void set_trace_id(::google::protobuf::uint64 value);

  // required uint64 span_id = 2;
  bool has_span_id() const;
  void clear_span_id();
  static const int kSpanIdFieldNumber = 2;
  ::google::protobuf::uint64 span_id() const;
  void set_span_id(::google::protobuf::uint64 value);

  // required uint64 parent_span_id = 3;
  bool has_parent_span_id() const;
  void clear_parent_span_id();
  static const int kParentSpanIdFieldNumber = 3;
  ::google::protobuf::uint64 parent_span_id() const;
  void set_parent_span_id(::google::protobuf::uint64 value);

  // optional uint64 log_id = 4;
  bool has_log_id() const;
  void clear_log_id();
  static const int kLogIdFieldNumber = 4;
  ::google::protobuf::uint64 log_id() const;
  void set_log_id(::google::protobuf::uint64 value);

  // optional uint32 remote_ip = 5;
  bool has_remote_ip() const;
  void clear_remote_ip();
  static const int kRemoteIpFieldNumber = 5;
  ::google::protobuf::uint32 remote_ip() const;
  void set_remote_ip(::google::protobuf::uint32 value);

  // optional uint32 remote_port = 6;
  bool has_remote_port() const;
  void clear_remote_port();
  static const int kRemotePortFieldNumber = 6;
  ::google::protobuf::uint32 remote_port() const;
  void set_remote_port(::google::protobuf::uint32 value);

  // optional .brpc.SpanType type = 7;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 7;
  ::brpc::SpanType type() const;
  void set_type(::brpc::SpanType value);

  // optional .brpc.ProtocolType protocol = 8;
  bool has_protocol() const;
  void clear_protocol();
  static const int kProtocolFieldNumber = 8;
  ::brpc::ProtocolType protocol() const;
  void set_protocol(::brpc::ProtocolType value);

  // optional int32 error_code = 9;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 9;
  ::google::protobuf::int32 error_code() const;
  void set_error_code(::google::protobuf::int32 value);

  // optional int32 request_size = 10;
  bool has_request_size() const;
  void clear_request_size();
  static const int kRequestSizeFieldNumber = 10;
  ::google::protobuf::int32 request_size() const;
  void set_request_size(::google::protobuf::int32 value);

  // optional int64 received_real_us = 12;
  bool has_received_real_us() const;
  void clear_received_real_us();
  static const int kReceivedRealUsFieldNumber = 12;
  ::google::protobuf::int64 received_real_us() const;
  void set_received_real_us(::google::protobuf::int64 value);

  // optional int64 start_parse_real_us = 13;
  bool has_start_parse_real_us() const;
  void clear_start_parse_real_us();
  static const int kStartParseRealUsFieldNumber = 13;
  ::google::protobuf::int64 start_parse_real_us() const;
  void set_start_parse_real_us(::google::protobuf::int64 value);

  // optional int64 start_callback_real_us = 14;
  bool has_start_callback_real_us() const;
  void clear_start_callback_real_us();
  static const int kStartCallbackRealUsFieldNumber = 14;
  ::google::protobuf::int64 start_callback_real_us() const;
  void set_start_callback_real_us(::google::protobuf::int64 value);

  // optional int64 start_send_real_us = 15;
  bool has_start_send_real_us() const;
  void clear_start_send_real_us();
  static const int kStartSendRealUsFieldNumber = 15;
  ::google::protobuf::int64 start_send_real_us() const;
  void set_start_send_real_us(::google::protobuf::int64 value);

  // optional int64 sent_real_us = 16;
  bool has_sent_real_us() const;
  void clear_sent_real_us();
  static const int kSentRealUsFieldNumber = 16;
  ::google::protobuf::int64 sent_real_us() const;
  void set_sent_real_us(::google::protobuf::int64 value);

  // optional int32 response_size = 11;
  bool has_response_size() const;
  void clear_response_size();
  static const int kResponseSizeFieldNumber = 11;
  ::google::protobuf::int32 response_size() const;
  void set_response_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:brpc.TracingSpan)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::brpc::SpanAnnotation > annotations_;
  ::google::protobuf::RepeatedPtrField< ::brpc::TracingSpan > client_spans_;
  ::google::protobuf::internal::ArenaStringPtr span_name_;
  ::google::protobuf::uint64 trace_id_;
  ::google::protobuf::uint64 span_id_;
  ::google::protobuf::uint64 parent_span_id_;
  ::google::protobuf::uint64 log_id_;
  ::google::protobuf::uint32 remote_ip_;
  ::google::protobuf::uint32 remote_port_;
  int type_;
  int protocol_;
  ::google::protobuf::int32 error_code_;
  ::google::protobuf::int32 request_size_;
  ::google::protobuf::int64 received_real_us_;
  ::google::protobuf::int64 start_parse_real_us_;
  ::google::protobuf::int64 start_callback_real_us_;
  ::google::protobuf::int64 start_send_real_us_;
  ::google::protobuf::int64 sent_real_us_;
  ::google::protobuf::int32 response_size_;
  friend struct ::TableStruct_brpc_2fspan_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RpczSpan

// required uint64 trace_id = 1;
inline bool RpczSpan::has_trace_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RpczSpan::clear_trace_id() {
  trace_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 RpczSpan::trace_id() const {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.trace_id)
  return trace_id_;
}
inline void RpczSpan::set_trace_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  trace_id_ = value;
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.trace_id)
}

// required uint64 span_id = 2;
inline bool RpczSpan::has_span_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RpczSpan::clear_span_id() {
  span_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint64 RpczSpan::span_id() const {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.span_id)
  return span_id_;
}
inline void RpczSpan::set_span_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  span_id_ = value;
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.span_id)
}

// required uint64 parent_span_id = 3;
inline bool RpczSpan::has_parent_span_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RpczSpan::clear_parent_span_id() {
  parent_span_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint64 RpczSpan::parent_span_id() const {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.parent_span_id)
  return parent_span_id_;
}
inline void RpczSpan::set_parent_span_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  parent_span_id_ = value;
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.parent_span_id)
}

// optional uint64 log_id = 4;
inline bool RpczSpan::has_log_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RpczSpan::clear_log_id() {
  log_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint64 RpczSpan::log_id() const {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.log_id)
  return log_id_;
}
inline void RpczSpan::set_log_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  log_id_ = value;
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.log_id)
}

// optional uint64 base_cid = 5;
inline bool RpczSpan::has_base_cid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RpczSpan::clear_base_cid() {
  base_cid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint64 RpczSpan::base_cid() const {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.base_cid)
  return base_cid_;
}
inline void RpczSpan::set_base_cid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  base_cid_ = value;
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.base_cid)
}

// optional uint64 ending_cid = 6;
inline bool RpczSpan::has_ending_cid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RpczSpan::clear_ending_cid() {
  ending_cid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint64 RpczSpan::ending_cid() const {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.ending_cid)
  return ending_cid_;
}
inline void RpczSpan::set_ending_cid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  ending_cid_ = value;
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.ending_cid)
}

// optional uint32 remote_ip = 7;
inline bool RpczSpan::has_remote_ip() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RpczSpan::clear_remote_ip() {
  remote_ip_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 RpczSpan::remote_ip() const {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.remote_ip)
  return remote_ip_;
}
inline void RpczSpan::set_remote_ip(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  remote_ip_ = value;
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.remote_ip)
}

// optional uint32 remote_port = 8;
inline bool RpczSpan::has_remote_port() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RpczSpan::clear_remote_port() {
  remote_port_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::uint32 RpczSpan::remote_port() const {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.remote_port)
  return remote_port_;
}
inline void RpczSpan::set_remote_port(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  remote_port_ = value;
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.remote_port)
}

// optional .brpc.SpanType type = 9;
inline bool RpczSpan::has_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RpczSpan::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::brpc::SpanType RpczSpan::type() const {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.type)
  return static_cast< ::brpc::SpanType >(type_);
}
inline void RpczSpan::set_type(::brpc::SpanType value) {
  assert(::brpc::SpanType_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  type_ = value;
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.type)
}

// optional bool async = 10;
inline bool RpczSpan::has_async() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RpczSpan::clear_async() {
  async_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool RpczSpan::async() const {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.async)
  return async_;
}
inline void RpczSpan::set_async(bool value) {
  _has_bits_[0] |= 0x00000800u;
  async_ = value;
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.async)
}

// optional .brpc.ProtocolType protocol = 11;
inline bool RpczSpan::has_protocol() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RpczSpan::clear_protocol() {
  protocol_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::brpc::ProtocolType RpczSpan::protocol() const {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.protocol)
  return static_cast< ::brpc::ProtocolType >(protocol_);
}
inline void RpczSpan::set_protocol(::brpc::ProtocolType value) {
  assert(::brpc::ProtocolType_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  protocol_ = value;
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.protocol)
}

// optional int32 error_code = 12;
inline bool RpczSpan::has_error_code() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RpczSpan::clear_error_code() {
  error_code_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::google::protobuf::int32 RpczSpan::error_code() const {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.error_code)
  return error_code_;
}
inline void RpczSpan::set_error_code(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  error_code_ = value;
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.error_code)
}

// optional int32 request_size = 13;
inline bool RpczSpan::has_request_size() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RpczSpan::clear_request_size() {
  request_size_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::google::protobuf::int32 RpczSpan::request_size() const {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.request_size)
  return request_size_;
}
inline void RpczSpan::set_request_size(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  request_size_ = value;
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.request_size)
}

// optional int32 response_size = 14;
inline bool RpczSpan::has_response_size() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RpczSpan::clear_response_size() {
  response_size_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::google::protobuf::int32 RpczSpan::response_size() const {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.response_size)
  return response_size_;
}
inline void RpczSpan::set_response_size(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  response_size_ = value;
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.response_size)
}

// optional int64 received_real_us = 15;
inline bool RpczSpan::has_received_real_us() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RpczSpan::clear_received_real_us() {
  received_real_us_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00010000u;
}
inline ::google::protobuf::int64 RpczSpan::received_real_us() const {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.received_real_us)
  return received_real_us_;
}
inline void RpczSpan::set_received_real_us(::google::protobuf::int64 value) {
  _has_bits_[0] |= 0x00010000u;
  received_real_us_ = value;
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.received_real_us)
}

// optional int64 start_parse_real_us = 16;
inline bool RpczSpan::has_start_parse_real_us() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RpczSpan::clear_start_parse_real_us() {
  start_parse_real_us_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00020000u;
}
inline ::google::protobuf::int64 RpczSpan::start_parse_real_us() const {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.start_parse_real_us)
  return start_parse_real_us_;
}
inline void RpczSpan::set_start_parse_real_us(::google::protobuf::int64 value) {
  _has_bits_[0] |= 0x00020000u;
  start_parse_real_us_ = value;
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.start_parse_real_us)
}

// optional int64 start_callback_real_us = 17;
inline bool RpczSpan::has_start_callback_real_us() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RpczSpan::clear_start_callback_real_us() {
  start_callback_real_us_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00040000u;
}
inline ::google::protobuf::int64 RpczSpan::start_callback_real_us() const {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.start_callback_real_us)
  return start_callback_real_us_;
}
inline void RpczSpan::set_start_callback_real_us(::google::protobuf::int64 value) {
  _has_bits_[0] |= 0x00040000u;
  start_callback_real_us_ = value;
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.start_callback_real_us)
}

// optional int64 start_send_real_us = 18;
inline bool RpczSpan::has_start_send_real_us() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void RpczSpan::clear_start_send_real_us() {
  start_send_real_us_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00080000u;
}
inline ::google::protobuf::int64 RpczSpan::start_send_real_us() const {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.start_send_real_us)
  return start_send_real_us_;
}
inline void RpczSpan::set_start_send_real_us(::google::protobuf::int64 value) {
  _has_bits_[0] |= 0x00080000u;
  start_send_real_us_ = value;
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.start_send_real_us)
}

// optional int64 sent_real_us = 19;
inline bool RpczSpan::has_sent_real_us() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void RpczSpan::clear_sent_real_us() {
  sent_real_us_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00100000u;
}
inline ::google::protobuf::int64 RpczSpan::sent_real_us() const {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.sent_real_us)
  return sent_real_us_;
}
inline void RpczSpan::set_sent_real_us(::google::protobuf::int64 value) {
  _has_bits_[0] |= 0x00100000u;
  sent_real_us_ = value;
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.sent_real_us)
}

// optional bytes info = 20;
inline bool RpczSpan::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpczSpan::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& RpczSpan::info() const {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.info)
  return info_.GetNoArena();
}
inline void RpczSpan::set_info(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.info)
}
#if LANG_CXX11
inline void RpczSpan::set_info(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:brpc.RpczSpan.info)
}
#endif
inline void RpczSpan::set_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.RpczSpan.info)
}
inline void RpczSpan::set_info(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.RpczSpan.info)
}
inline ::std::string* RpczSpan::mutable_info() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:brpc.RpczSpan.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpczSpan::release_info() {
  // @@protoc_insertion_point(field_release:brpc.RpczSpan.info)
  if (!has_info()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return info_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpczSpan::set_allocated_info(::std::string* info) {
  if (info != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:brpc.RpczSpan.info)
}

// repeated .brpc.RpczSpan client_spans = 21;
inline int RpczSpan::client_spans_size() const {
  return client_spans_.size();
}
inline void RpczSpan::clear_client_spans() {
  client_spans_.Clear();
}
inline ::brpc::RpczSpan* RpczSpan::mutable_client_spans(int index) {
  // @@protoc_insertion_point(field_mutable:brpc.RpczSpan.client_spans)
  return client_spans_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::brpc::RpczSpan >*
RpczSpan::mutable_client_spans() {
  // @@protoc_insertion_point(field_mutable_list:brpc.RpczSpan.client_spans)
  return &client_spans_;
}
inline const ::brpc::RpczSpan& RpczSpan::client_spans(int index) const {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.client_spans)
  return client_spans_.Get(index);
}
inline ::brpc::RpczSpan* RpczSpan::add_client_spans() {
  // @@protoc_insertion_point(field_add:brpc.RpczSpan.client_spans)
  return client_spans_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::brpc::RpczSpan >&
RpczSpan::client_spans() const {
  // @@protoc_insertion_point(field_list:brpc.RpczSpan.client_spans)
  return client_spans_;
}

// optional bytes full_method_name = 22;
inline bool RpczSpan::has_full_method_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpczSpan::clear_full_method_name() {
  full_method_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& RpczSpan::full_method_name() const {
  // @@protoc_insertion_point(field_get:brpc.RpczSpan.full_method_name)
  return full_method_name_.GetNoArena();
}
inline void RpczSpan::set_full_method_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  full_method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.RpczSpan.full_method_name)
}
#if LANG_CXX11
inline void RpczSpan::set_full_method_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  full_method_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:brpc.RpczSpan.full_method_name)
}
#endif
inline void RpczSpan::set_full_method_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  full_method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.RpczSpan.full_method_name)
}
inline void RpczSpan::set_full_method_name(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  full_method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.RpczSpan.full_method_name)
}
inline ::std::string* RpczSpan::mutable_full_method_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:brpc.RpczSpan.full_method_name)
  return full_method_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpczSpan::release_full_method_name() {
  // @@protoc_insertion_point(field_release:brpc.RpczSpan.full_method_name)
  if (!has_full_method_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return full_method_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpczSpan::set_allocated_full_method_name(::std::string* full_method_name) {
  if (full_method_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  full_method_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), full_method_name);
  // @@protoc_insertion_point(field_set_allocated:brpc.RpczSpan.full_method_name)
}

// -------------------------------------------------------------------

// BriefSpan

// required uint64 trace_id = 1;
inline bool BriefSpan::has_trace_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BriefSpan::clear_trace_id() {
  trace_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 BriefSpan::trace_id() const {
  // @@protoc_insertion_point(field_get:brpc.BriefSpan.trace_id)
  return trace_id_;
}
inline void BriefSpan::set_trace_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  trace_id_ = value;
  // @@protoc_insertion_point(field_set:brpc.BriefSpan.trace_id)
}

// required uint64 span_id = 2;
inline bool BriefSpan::has_span_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BriefSpan::clear_span_id() {
  span_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 BriefSpan::span_id() const {
  // @@protoc_insertion_point(field_get:brpc.BriefSpan.span_id)
  return span_id_;
}
inline void BriefSpan::set_span_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  span_id_ = value;
  // @@protoc_insertion_point(field_set:brpc.BriefSpan.span_id)
}

// optional uint64 log_id = 3;
inline bool BriefSpan::has_log_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BriefSpan::clear_log_id() {
  log_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint64 BriefSpan::log_id() const {
  // @@protoc_insertion_point(field_get:brpc.BriefSpan.log_id)
  return log_id_;
}
inline void BriefSpan::set_log_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  log_id_ = value;
  // @@protoc_insertion_point(field_set:brpc.BriefSpan.log_id)
}

// optional .brpc.SpanType type = 4;
inline bool BriefSpan::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BriefSpan::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::brpc::SpanType BriefSpan::type() const {
  // @@protoc_insertion_point(field_get:brpc.BriefSpan.type)
  return static_cast< ::brpc::SpanType >(type_);
}
inline void BriefSpan::set_type(::brpc::SpanType value) {
  assert(::brpc::SpanType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
  // @@protoc_insertion_point(field_set:brpc.BriefSpan.type)
}

// optional int32 error_code = 5;
inline bool BriefSpan::has_error_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BriefSpan::clear_error_code() {
  error_code_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::int32 BriefSpan::error_code() const {
  // @@protoc_insertion_point(field_get:brpc.BriefSpan.error_code)
  return error_code_;
}
inline void BriefSpan::set_error_code(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  error_code_ = value;
  // @@protoc_insertion_point(field_set:brpc.BriefSpan.error_code)
}

// optional int32 request_size = 6;
inline bool BriefSpan::has_request_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BriefSpan::clear_request_size() {
  request_size_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::int32 BriefSpan::request_size() const {
  // @@protoc_insertion_point(field_get:brpc.BriefSpan.request_size)
  return request_size_;
}
inline void BriefSpan::set_request_size(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  request_size_ = value;
  // @@protoc_insertion_point(field_set:brpc.BriefSpan.request_size)
}

// optional int32 response_size = 7;
inline bool BriefSpan::has_response_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BriefSpan::clear_response_size() {
  response_size_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::int32 BriefSpan::response_size() const {
  // @@protoc_insertion_point(field_get:brpc.BriefSpan.response_size)
  return response_size_;
}
inline void BriefSpan::set_response_size(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  response_size_ = value;
  // @@protoc_insertion_point(field_set:brpc.BriefSpan.response_size)
}

// optional int64 start_real_us = 8;
inline bool BriefSpan::has_start_real_us() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BriefSpan::clear_start_real_us() {
  start_real_us_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::int64 BriefSpan::start_real_us() const {
  // @@protoc_insertion_point(field_get:brpc.BriefSpan.start_real_us)
  return start_real_us_;
}
inline void BriefSpan::set_start_real_us(::google::protobuf::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  start_real_us_ = value;
  // @@protoc_insertion_point(field_set:brpc.BriefSpan.start_real_us)
}

// optional int64 latency_us = 9;
inline bool BriefSpan::has_latency_us() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BriefSpan::clear_latency_us() {
  latency_us_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::int64 BriefSpan::latency_us() const {
  // @@protoc_insertion_point(field_get:brpc.BriefSpan.latency_us)
  return latency_us_;
}
inline void BriefSpan::set_latency_us(::google::protobuf::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  latency_us_ = value;
  // @@protoc_insertion_point(field_set:brpc.BriefSpan.latency_us)
}

// optional bytes full_method_name = 10;
inline bool BriefSpan::has_full_method_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BriefSpan::clear_full_method_name() {
  full_method_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& BriefSpan::full_method_name() const {
  // @@protoc_insertion_point(field_get:brpc.BriefSpan.full_method_name)
  return full_method_name_.GetNoArena();
}
inline void BriefSpan::set_full_method_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  full_method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.BriefSpan.full_method_name)
}
#if LANG_CXX11
inline void BriefSpan::set_full_method_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  full_method_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:brpc.BriefSpan.full_method_name)
}
#endif
inline void BriefSpan::set_full_method_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  full_method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.BriefSpan.full_method_name)
}
inline void BriefSpan::set_full_method_name(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  full_method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.BriefSpan.full_method_name)
}
inline ::std::string* BriefSpan::mutable_full_method_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:brpc.BriefSpan.full_method_name)
  return full_method_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BriefSpan::release_full_method_name() {
  // @@protoc_insertion_point(field_release:brpc.BriefSpan.full_method_name)
  if (!has_full_method_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return full_method_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BriefSpan::set_allocated_full_method_name(::std::string* full_method_name) {
  if (full_method_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  full_method_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), full_method_name);
  // @@protoc_insertion_point(field_set_allocated:brpc.BriefSpan.full_method_name)
}

// -------------------------------------------------------------------

// SpanAnnotation

// required int64 realtime_us = 1;
inline bool SpanAnnotation::has_realtime_us() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpanAnnotation::clear_realtime_us() {
  realtime_us_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::int64 SpanAnnotation::realtime_us() const {
  // @@protoc_insertion_point(field_get:brpc.SpanAnnotation.realtime_us)
  return realtime_us_;
}
inline void SpanAnnotation::set_realtime_us(::google::protobuf::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  realtime_us_ = value;
  // @@protoc_insertion_point(field_set:brpc.SpanAnnotation.realtime_us)
}

// required string content = 2;
inline bool SpanAnnotation::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpanAnnotation::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& SpanAnnotation::content() const {
  // @@protoc_insertion_point(field_get:brpc.SpanAnnotation.content)
  return content_.GetNoArena();
}
inline void SpanAnnotation::set_content(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.SpanAnnotation.content)
}
#if LANG_CXX11
inline void SpanAnnotation::set_content(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:brpc.SpanAnnotation.content)
}
#endif
inline void SpanAnnotation::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.SpanAnnotation.content)
}
inline void SpanAnnotation::set_content(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.SpanAnnotation.content)
}
inline ::std::string* SpanAnnotation::mutable_content() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:brpc.SpanAnnotation.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SpanAnnotation::release_content() {
  // @@protoc_insertion_point(field_release:brpc.SpanAnnotation.content)
  if (!has_content()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return content_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SpanAnnotation::set_allocated_content(::std::string* content) {
  if (content != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:brpc.SpanAnnotation.content)
}

// -------------------------------------------------------------------

// TracingSpan

// required uint64 trace_id = 1;
inline bool TracingSpan::has_trace_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TracingSpan::clear_trace_id() {
  trace_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 TracingSpan::trace_id() const {
  // @@protoc_insertion_point(field_get:brpc.TracingSpan.trace_id)
  return trace_id_;
}
inline void TracingSpan::set_trace_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  trace_id_ = value;
  // @@protoc_insertion_point(field_set:brpc.TracingSpan.trace_id)
}

// required uint64 span_id = 2;
inline bool TracingSpan::has_span_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TracingSpan::clear_span_id() {
  span_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 TracingSpan::span_id() const {
  // @@protoc_insertion_point(field_get:brpc.TracingSpan.span_id)
  return span_id_;
}
inline void TracingSpan::set_span_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  span_id_ = value;
  // @@protoc_insertion_point(field_set:brpc.TracingSpan.span_id)
}

// required uint64 parent_span_id = 3;
inline bool TracingSpan::has_parent_span_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TracingSpan::clear_parent_span_id() {
  parent_span_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint64 TracingSpan::parent_span_id() const {
  // @@protoc_insertion_point(field_get:brpc.TracingSpan.parent_span_id)
  return parent_span_id_;
}
inline void TracingSpan::set_parent_span_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  parent_span_id_ = value;
  // @@protoc_insertion_point(field_set:brpc.TracingSpan.parent_span_id)
}

// optional uint64 log_id = 4;
inline bool TracingSpan::has_log_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TracingSpan::clear_log_id() {
  log_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint64 TracingSpan::log_id() const {
  // @@protoc_insertion_point(field_get:brpc.TracingSpan.log_id)
  return log_id_;
}
inline void TracingSpan::set_log_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  log_id_ = value;
  // @@protoc_insertion_point(field_set:brpc.TracingSpan.log_id)
}

// optional uint32 remote_ip = 5;
inline bool TracingSpan::has_remote_ip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TracingSpan::clear_remote_ip() {
  remote_ip_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 TracingSpan::remote_ip() const {
  // @@protoc_insertion_point(field_get:brpc.TracingSpan.remote_ip)
  return remote_ip_;
}
inline void TracingSpan::set_remote_ip(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  remote_ip_ = value;
  // @@protoc_insertion_point(field_set:brpc.TracingSpan.remote_ip)
}

// optional uint32 remote_port = 6;
inline bool TracingSpan::has_remote_port() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TracingSpan::clear_remote_port() {
  remote_port_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 TracingSpan::remote_port() const {
  // @@protoc_insertion_point(field_get:brpc.TracingSpan.remote_port)
  return remote_port_;
}
inline void TracingSpan::set_remote_port(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  remote_port_ = value;
  // @@protoc_insertion_point(field_set:brpc.TracingSpan.remote_port)
}

// optional .brpc.SpanType type = 7;
inline bool TracingSpan::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TracingSpan::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::brpc::SpanType TracingSpan::type() const {
  // @@protoc_insertion_point(field_get:brpc.TracingSpan.type)
  return static_cast< ::brpc::SpanType >(type_);
}
inline void TracingSpan::set_type(::brpc::SpanType value) {
  assert(::brpc::SpanType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  type_ = value;
  // @@protoc_insertion_point(field_set:brpc.TracingSpan.type)
}

// optional .brpc.ProtocolType protocol = 8;
inline bool TracingSpan::has_protocol() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TracingSpan::clear_protocol() {
  protocol_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::brpc::ProtocolType TracingSpan::protocol() const {
  // @@protoc_insertion_point(field_get:brpc.TracingSpan.protocol)
  return static_cast< ::brpc::ProtocolType >(protocol_);
}
inline void TracingSpan::set_protocol(::brpc::ProtocolType value) {
  assert(::brpc::ProtocolType_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  protocol_ = value;
  // @@protoc_insertion_point(field_set:brpc.TracingSpan.protocol)
}

// optional int32 error_code = 9;
inline bool TracingSpan::has_error_code() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TracingSpan::clear_error_code() {
  error_code_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::int32 TracingSpan::error_code() const {
  // @@protoc_insertion_point(field_get:brpc.TracingSpan.error_code)
  return error_code_;
}
inline void TracingSpan::set_error_code(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  error_code_ = value;
  // @@protoc_insertion_point(field_set:brpc.TracingSpan.error_code)
}

// optional int32 request_size = 10;
inline bool TracingSpan::has_request_size() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TracingSpan::clear_request_size() {
  request_size_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::google::protobuf::int32 TracingSpan::request_size() const {
  // @@protoc_insertion_point(field_get:brpc.TracingSpan.request_size)
  return request_size_;
}
inline void TracingSpan::set_request_size(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  request_size_ = value;
  // @@protoc_insertion_point(field_set:brpc.TracingSpan.request_size)
}

// optional int32 response_size = 11;
inline bool TracingSpan::has_response_size() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TracingSpan::clear_response_size() {
  response_size_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::google::protobuf::int32 TracingSpan::response_size() const {
  // @@protoc_insertion_point(field_get:brpc.TracingSpan.response_size)
  return response_size_;
}
inline void TracingSpan::set_response_size(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  response_size_ = value;
  // @@protoc_insertion_point(field_set:brpc.TracingSpan.response_size)
}

// optional int64 received_real_us = 12;
inline bool TracingSpan::has_received_real_us() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TracingSpan::clear_received_real_us() {
  received_real_us_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::google::protobuf::int64 TracingSpan::received_real_us() const {
  // @@protoc_insertion_point(field_get:brpc.TracingSpan.received_real_us)
  return received_real_us_;
}
inline void TracingSpan::set_received_real_us(::google::protobuf::int64 value) {
  _has_bits_[0] |= 0x00000800u;
  received_real_us_ = value;
  // @@protoc_insertion_point(field_set:brpc.TracingSpan.received_real_us)
}

// optional int64 start_parse_real_us = 13;
inline bool TracingSpan::has_start_parse_real_us() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TracingSpan::clear_start_parse_real_us() {
  start_parse_real_us_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::google::protobuf::int64 TracingSpan::start_parse_real_us() const {
  // @@protoc_insertion_point(field_get:brpc.TracingSpan.start_parse_real_us)
  return start_parse_real_us_;
}
inline void TracingSpan::set_start_parse_real_us(::google::protobuf::int64 value) {
  _has_bits_[0] |= 0x00001000u;
  start_parse_real_us_ = value;
  // @@protoc_insertion_point(field_set:brpc.TracingSpan.start_parse_real_us)
}

// optional int64 start_callback_real_us = 14;
inline bool TracingSpan::has_start_callback_real_us() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TracingSpan::clear_start_callback_real_us() {
  start_callback_real_us_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::google::protobuf::int64 TracingSpan::start_callback_real_us() const {
  // @@protoc_insertion_point(field_get:brpc.TracingSpan.start_callback_real_us)
  return start_callback_real_us_;
}
inline void TracingSpan::set_start_callback_real_us(::google::protobuf::int64 value) {
  _has_bits_[0] |= 0x00002000u;
  start_callback_real_us_ = value;
  // @@protoc_insertion_point(field_set:brpc.TracingSpan.start_callback_real_us)
}

// optional int64 start_send_real_us = 15;
inline bool TracingSpan::has_start_send_real_us() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TracingSpan::clear_start_send_real_us() {
  start_send_real_us_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00004000u;
}
inline ::google::protobuf::int64 TracingSpan::start_send_real_us() const {
  // @@protoc_insertion_point(field_get:brpc.TracingSpan.start_send_real_us)
  return start_send_real_us_;
}
inline void TracingSpan::set_start_send_real_us(::google::protobuf::int64 value) {
  _has_bits_[0] |= 0x00004000u;
  start_send_real_us_ = value;
  // @@protoc_insertion_point(field_set:brpc.TracingSpan.start_send_real_us)
}

// optional int64 sent_real_us = 16;
inline bool TracingSpan::has_sent_real_us() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TracingSpan::clear_sent_real_us() {
  sent_real_us_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00008000u;
}
inline ::google::protobuf::int64 TracingSpan::sent_real_us() const {
  // @@protoc_insertion_point(field_get:brpc.TracingSpan.sent_real_us)
  return sent_real_us_;
}
inline void TracingSpan::set_sent_real_us(::google::protobuf::int64 value) {
  _has_bits_[0] |= 0x00008000u;
  sent_real_us_ = value;
  // @@protoc_insertion_point(field_set:brpc.TracingSpan.sent_real_us)
}

// optional string span_name = 17;
inline bool TracingSpan::has_span_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TracingSpan::clear_span_name() {
  span_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& TracingSpan::span_name() const {
  // @@protoc_insertion_point(field_get:brpc.TracingSpan.span_name)
  return span_name_.GetNoArena();
}
inline void TracingSpan::set_span_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  span_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.TracingSpan.span_name)
}
#if LANG_CXX11
inline void TracingSpan::set_span_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  span_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:brpc.TracingSpan.span_name)
}
#endif
inline void TracingSpan::set_span_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  span_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.TracingSpan.span_name)
}
inline void TracingSpan::set_span_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  span_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.TracingSpan.span_name)
}
inline ::std::string* TracingSpan::mutable_span_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:brpc.TracingSpan.span_name)
  return span_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TracingSpan::release_span_name() {
  // @@protoc_insertion_point(field_release:brpc.TracingSpan.span_name)
  if (!has_span_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return span_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TracingSpan::set_allocated_span_name(::std::string* span_name) {
  if (span_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  span_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), span_name);
  // @@protoc_insertion_point(field_set_allocated:brpc.TracingSpan.span_name)
}

// repeated .brpc.SpanAnnotation annotations = 18;
inline int TracingSpan::annotations_size() const {
  return annotations_.size();
}
inline void TracingSpan::clear_annotations() {
  annotations_.Clear();
}
inline ::brpc::SpanAnnotation* TracingSpan::mutable_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:brpc.TracingSpan.annotations)
  return annotations_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::brpc::SpanAnnotation >*
TracingSpan::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_list:brpc.TracingSpan.annotations)
  return &annotations_;
}
inline const ::brpc::SpanAnnotation& TracingSpan::annotations(int index) const {
  // @@protoc_insertion_point(field_get:brpc.TracingSpan.annotations)
  return annotations_.Get(index);
}
inline ::brpc::SpanAnnotation* TracingSpan::add_annotations() {
  // @@protoc_insertion_point(field_add:brpc.TracingSpan.annotations)
  return annotations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::brpc::SpanAnnotation >&
TracingSpan::annotations() const {
  // @@protoc_insertion_point(field_list:brpc.TracingSpan.annotations)
  return annotations_;
}

// repeated .brpc.TracingSpan client_spans = 19;
inline int TracingSpan::client_spans_size() const {
  return client_spans_.size();
}
inline void TracingSpan::clear_client_spans() {
  client_spans_.Clear();
}
inline ::brpc::TracingSpan* TracingSpan::mutable_client_spans(int index) {
  // @@protoc_insertion_point(field_mutable:brpc.TracingSpan.client_spans)
  return client_spans_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::brpc::TracingSpan >*
TracingSpan::mutable_client_spans() {
  // @@protoc_insertion_point(field_mutable_list:brpc.TracingSpan.client_spans)
  return &client_spans_;
}
inline const ::brpc::TracingSpan& TracingSpan::client_spans(int index) const {
  // @@protoc_insertion_point(field_get:brpc.TracingSpan.client_spans)
  return client_spans_.Get(index);
}
inline ::brpc::TracingSpan* TracingSpan::add_client_spans() {
  // @@protoc_insertion_point(field_add:brpc.TracingSpan.client_spans)
  return client_spans_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::brpc::TracingSpan >&
TracingSpan::client_spans() const {
  // @@protoc_insertion_point(field_list:brpc.TracingSpan.client_spans)
  return client_spans_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace brpc

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::brpc::SpanType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::brpc::SpanType>() {
  return ::brpc::SpanType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_brpc_2fspan_2eproto
