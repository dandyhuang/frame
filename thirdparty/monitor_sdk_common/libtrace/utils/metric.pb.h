// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metric.proto

#ifndef PROTOBUF_INCLUDED_metric_2eproto
#define PROTOBUF_INCLUDED_metric_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "span.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_metric_2eproto 

namespace protobuf_metric_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_metric_2eproto
namespace metric {
class MValue;
class MValueDefaultTypeInternal;
extern MValueDefaultTypeInternal _MValue_default_instance_;
class Metric;
class MetricDefaultTypeInternal;
extern MetricDefaultTypeInternal _Metric_default_instance_;
}  // namespace metric
namespace google {
namespace protobuf {
template<> ::metric::MValue* Arena::CreateMaybeMessage<::metric::MValue>(Arena*);
template<> ::metric::Metric* Arena::CreateMaybeMessage<::metric::Metric>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metric {

// ===================================================================

class MValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metric.MValue) */ {
 public:
  MValue();
  virtual ~MValue();

  MValue(const MValue& from);

  inline MValue& operator=(const MValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MValue(MValue&& from) noexcept
    : MValue() {
    *this = ::std::move(from);
  }

  inline MValue& operator=(MValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MValue* internal_default_instance() {
    return reinterpret_cast<const MValue*>(
               &_MValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MValue* other);
  friend void swap(MValue& a, MValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MValue* New() const final {
    return CreateMaybeMessage<MValue>(NULL);
  }

  MValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MValue& from);
  void MergeFrom(const MValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 totalCount = 1;
  bool has_totalcount() const;
  void clear_totalcount();
  static const int kTotalCountFieldNumber = 1;
  ::google::protobuf::int64 totalcount() const;
  void set_totalcount(::google::protobuf::int64 value);

  // required int64 successCount = 2;
  bool has_successcount() const;
  void clear_successcount();
  static const int kSuccessCountFieldNumber = 2;
  ::google::protobuf::int64 successcount() const;
  void set_successcount(::google::protobuf::int64 value);

  // required int64 failedCount = 3;
  bool has_failedcount() const;
  void clear_failedcount();
  static const int kFailedCountFieldNumber = 3;
  ::google::protobuf::int64 failedcount() const;
  void set_failedcount(::google::protobuf::int64 value);

  // required int64 timeoutCount = 4;
  bool has_timeoutcount() const;
  void clear_timeoutcount();
  static const int kTimeoutCountFieldNumber = 4;
  ::google::protobuf::int64 timeoutcount() const;
  void set_timeoutcount(::google::protobuf::int64 value);

  // required int64 exceptionCount = 5;
  bool has_exceptioncount() const;
  void clear_exceptioncount();
  static const int kExceptionCountFieldNumber = 5;
  ::google::protobuf::int64 exceptioncount() const;
  void set_exceptioncount(::google::protobuf::int64 value);

  // required int32 rt = 6;
  bool has_rt() const;
  void clear_rt();
  static const int kRtFieldNumber = 6;
  ::google::protobuf::int32 rt() const;
  void set_rt(::google::protobuf::int32 value);

  // required int32 max_rt = 7;
  bool has_max_rt() const;
  void clear_max_rt();
  static const int kMaxRtFieldNumber = 7;
  ::google::protobuf::int32 max_rt() const;
  void set_max_rt(::google::protobuf::int32 value);

  // required int32 min_rt = 8;
  bool has_min_rt() const;
  void clear_min_rt();
  static const int kMinRtFieldNumber = 8;
  ::google::protobuf::int32 min_rt() const;
  void set_min_rt(::google::protobuf::int32 value);

  // required int32 p99 = 9;
  bool has_p99() const;
  void clear_p99();
  static const int kP99FieldNumber = 9;
  ::google::protobuf::int32 p99() const;
  void set_p99(::google::protobuf::int32 value);

  // required int32 p95 = 10;
  bool has_p95() const;
  void clear_p95();
  static const int kP95FieldNumber = 10;
  ::google::protobuf::int32 p95() const;
  void set_p95(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:metric.MValue)
 private:
  void set_has_totalcount();
  void clear_has_totalcount();
  void set_has_successcount();
  void clear_has_successcount();
  void set_has_failedcount();
  void clear_has_failedcount();
  void set_has_timeoutcount();
  void clear_has_timeoutcount();
  void set_has_exceptioncount();
  void clear_has_exceptioncount();
  void set_has_rt();
  void clear_has_rt();
  void set_has_max_rt();
  void clear_has_max_rt();
  void set_has_min_rt();
  void clear_has_min_rt();
  void set_has_p99();
  void clear_has_p99();
  void set_has_p95();
  void clear_has_p95();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int64 totalcount_;
  ::google::protobuf::int64 successcount_;
  ::google::protobuf::int64 failedcount_;
  ::google::protobuf::int64 timeoutcount_;
  ::google::protobuf::int64 exceptioncount_;
  ::google::protobuf::int32 rt_;
  ::google::protobuf::int32 max_rt_;
  ::google::protobuf::int32 min_rt_;
  ::google::protobuf::int32 p99_;
  ::google::protobuf::int32 p95_;
  friend struct ::protobuf_metric_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Metric : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metric.Metric) */ {
 public:
  Metric();
  virtual ~Metric();

  Metric(const Metric& from);

  inline Metric& operator=(const Metric& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Metric(Metric&& from) noexcept
    : Metric() {
    *this = ::std::move(from);
  }

  inline Metric& operator=(Metric&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Metric& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Metric* internal_default_instance() {
    return reinterpret_cast<const Metric*>(
               &_Metric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Metric* other);
  friend void swap(Metric& a, Metric& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Metric* New() const final {
    return CreateMaybeMessage<Metric>(NULL);
  }

  Metric* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Metric>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Metric& from);
  void MergeFrom(const Metric& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metric* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .span.TagEntry tags = 13;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 13;
  ::span::TagEntry* mutable_tags(int index);
  ::google::protobuf::RepeatedPtrField< ::span::TagEntry >*
      mutable_tags();
  const ::span::TagEntry& tags(int index) const;
  ::span::TagEntry* add_tags();
  const ::google::protobuf::RepeatedPtrField< ::span::TagEntry >&
      tags() const;

  // repeated .span.TagEntry dimension_tags = 14;
  int dimension_tags_size() const;
  void clear_dimension_tags();
  static const int kDimensionTagsFieldNumber = 14;
  ::span::TagEntry* mutable_dimension_tags(int index);
  ::google::protobuf::RepeatedPtrField< ::span::TagEntry >*
      mutable_dimension_tags();
  const ::span::TagEntry& dimension_tags(int index) const;
  ::span::TagEntry* add_dimension_tags();
  const ::google::protobuf::RepeatedPtrField< ::span::TagEntry >&
      dimension_tags() const;

  // required string sdkVer = 1;
  bool has_sdkver() const;
  void clear_sdkver();
  static const int kSdkVerFieldNumber = 1;
  const ::std::string& sdkver() const;
  void set_sdkver(const ::std::string& value);
  #if LANG_CXX11
  void set_sdkver(::std::string&& value);
  #endif
  void set_sdkver(const char* value);
  void set_sdkver(const char* value, size_t size);
  ::std::string* mutable_sdkver();
  ::std::string* release_sdkver();
  void set_allocated_sdkver(::std::string* sdkver);

  // required string type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required string component = 4;
  bool has_component() const;
  void clear_component();
  static const int kComponentFieldNumber = 4;
  const ::std::string& component() const;
  void set_component(const ::std::string& value);
  #if LANG_CXX11
  void set_component(::std::string&& value);
  #endif
  void set_component(const char* value);
  void set_component(const char* value, size_t size);
  ::std::string* mutable_component();
  ::std::string* release_component();
  void set_allocated_component(::std::string* component);

  // optional string method_name = 5;
  bool has_method_name() const;
  void clear_method_name();
  static const int kMethodNameFieldNumber = 5;
  const ::std::string& method_name() const;
  void set_method_name(const ::std::string& value);
  #if LANG_CXX11
  void set_method_name(::std::string&& value);
  #endif
  void set_method_name(const char* value);
  void set_method_name(const char* value, size_t size);
  ::std::string* mutable_method_name();
  ::std::string* release_method_name();
  void set_allocated_method_name(::std::string* method_name);

  // optional string service_name = 6;
  bool has_service_name() const;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 6;
  const ::std::string& service_name() const;
  void set_service_name(const ::std::string& value);
  #if LANG_CXX11
  void set_service_name(::std::string&& value);
  #endif
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  ::std::string* mutable_service_name();
  ::std::string* release_service_name();
  void set_allocated_service_name(::std::string* service_name);

  // optional string domain = 7;
  bool has_domain() const;
  void clear_domain();
  static const int kDomainFieldNumber = 7;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // optional string sign = 8;
  bool has_sign() const;
  void clear_sign();
  static const int kSignFieldNumber = 8;
  const ::std::string& sign() const;
  void set_sign(const ::std::string& value);
  #if LANG_CXX11
  void set_sign(::std::string&& value);
  #endif
  void set_sign(const char* value);
  void set_sign(const char* value, size_t size);
  ::std::string* mutable_sign();
  ::std::string* release_sign();
  void set_allocated_sign(::std::string* sign);

  // required string span_id = 9;
  bool has_span_id() const;
  void clear_span_id();
  static const int kSpanIdFieldNumber = 9;
  const ::std::string& span_id() const;
  void set_span_id(const ::std::string& value);
  #if LANG_CXX11
  void set_span_id(::std::string&& value);
  #endif
  void set_span_id(const char* value);
  void set_span_id(const char* value, size_t size);
  ::std::string* mutable_span_id();
  ::std::string* release_span_id();
  void set_allocated_span_id(::std::string* span_id);

  // required .span.EndPoint endpoint = 10;
  bool has_endpoint() const;
  void clear_endpoint();
  static const int kEndpointFieldNumber = 10;
  private:
  const ::span::EndPoint& _internal_endpoint() const;
  public:
  const ::span::EndPoint& endpoint() const;
  ::span::EndPoint* release_endpoint();
  ::span::EndPoint* mutable_endpoint();
  void set_allocated_endpoint(::span::EndPoint* endpoint);

  // required .span.AttachInfo attachInfo = 11;
  bool has_attachinfo() const;
  void clear_attachinfo();
  static const int kAttachInfoFieldNumber = 11;
  private:
  const ::span::AttachInfo& _internal_attachinfo() const;
  public:
  const ::span::AttachInfo& attachinfo() const;
  ::span::AttachInfo* release_attachinfo();
  ::span::AttachInfo* mutable_attachinfo();
  void set_allocated_attachinfo(::span::AttachInfo* attachinfo);

  // optional .metric.MValue mvalue = 12;
  bool has_mvalue() const;
  void clear_mvalue();
  static const int kMvalueFieldNumber = 12;
  private:
  const ::metric::MValue& _internal_mvalue() const;
  public:
  const ::metric::MValue& mvalue() const;
  ::metric::MValue* release_mvalue();
  ::metric::MValue* mutable_mvalue();
  void set_allocated_mvalue(::metric::MValue* mvalue);

  // required int64 timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:metric.Metric)
 private:
  void set_has_sdkver();
  void clear_has_sdkver();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_type();
  void clear_has_type();
  void set_has_component();
  void clear_has_component();
  void set_has_method_name();
  void clear_has_method_name();
  void set_has_service_name();
  void clear_has_service_name();
  void set_has_domain();
  void clear_has_domain();
  void set_has_sign();
  void clear_has_sign();
  void set_has_span_id();
  void clear_has_span_id();
  void set_has_endpoint();
  void clear_has_endpoint();
  void set_has_attachinfo();
  void clear_has_attachinfo();
  void set_has_mvalue();
  void clear_has_mvalue();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::span::TagEntry > tags_;
  ::google::protobuf::RepeatedPtrField< ::span::TagEntry > dimension_tags_;
  ::google::protobuf::internal::ArenaStringPtr sdkver_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr component_;
  ::google::protobuf::internal::ArenaStringPtr method_name_;
  ::google::protobuf::internal::ArenaStringPtr service_name_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  ::google::protobuf::internal::ArenaStringPtr sign_;
  ::google::protobuf::internal::ArenaStringPtr span_id_;
  ::span::EndPoint* endpoint_;
  ::span::AttachInfo* attachinfo_;
  ::metric::MValue* mvalue_;
  ::google::protobuf::int64 timestamp_;
  friend struct ::protobuf_metric_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MValue

// required int64 totalCount = 1;
inline bool MValue::has_totalcount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MValue::set_has_totalcount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MValue::clear_has_totalcount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MValue::clear_totalcount() {
  totalcount_ = GOOGLE_LONGLONG(0);
  clear_has_totalcount();
}
inline ::google::protobuf::int64 MValue::totalcount() const {
  // @@protoc_insertion_point(field_get:metric.MValue.totalCount)
  return totalcount_;
}
inline void MValue::set_totalcount(::google::protobuf::int64 value) {
  set_has_totalcount();
  totalcount_ = value;
  // @@protoc_insertion_point(field_set:metric.MValue.totalCount)
}

// required int64 successCount = 2;
inline bool MValue::has_successcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MValue::set_has_successcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MValue::clear_has_successcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MValue::clear_successcount() {
  successcount_ = GOOGLE_LONGLONG(0);
  clear_has_successcount();
}
inline ::google::protobuf::int64 MValue::successcount() const {
  // @@protoc_insertion_point(field_get:metric.MValue.successCount)
  return successcount_;
}
inline void MValue::set_successcount(::google::protobuf::int64 value) {
  set_has_successcount();
  successcount_ = value;
  // @@protoc_insertion_point(field_set:metric.MValue.successCount)
}

// required int64 failedCount = 3;
inline bool MValue::has_failedcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MValue::set_has_failedcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MValue::clear_has_failedcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MValue::clear_failedcount() {
  failedcount_ = GOOGLE_LONGLONG(0);
  clear_has_failedcount();
}
inline ::google::protobuf::int64 MValue::failedcount() const {
  // @@protoc_insertion_point(field_get:metric.MValue.failedCount)
  return failedcount_;
}
inline void MValue::set_failedcount(::google::protobuf::int64 value) {
  set_has_failedcount();
  failedcount_ = value;
  // @@protoc_insertion_point(field_set:metric.MValue.failedCount)
}

// required int64 timeoutCount = 4;
inline bool MValue::has_timeoutcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MValue::set_has_timeoutcount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MValue::clear_has_timeoutcount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MValue::clear_timeoutcount() {
  timeoutcount_ = GOOGLE_LONGLONG(0);
  clear_has_timeoutcount();
}
inline ::google::protobuf::int64 MValue::timeoutcount() const {
  // @@protoc_insertion_point(field_get:metric.MValue.timeoutCount)
  return timeoutcount_;
}
inline void MValue::set_timeoutcount(::google::protobuf::int64 value) {
  set_has_timeoutcount();
  timeoutcount_ = value;
  // @@protoc_insertion_point(field_set:metric.MValue.timeoutCount)
}

// required int64 exceptionCount = 5;
inline bool MValue::has_exceptioncount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MValue::set_has_exceptioncount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MValue::clear_has_exceptioncount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MValue::clear_exceptioncount() {
  exceptioncount_ = GOOGLE_LONGLONG(0);
  clear_has_exceptioncount();
}
inline ::google::protobuf::int64 MValue::exceptioncount() const {
  // @@protoc_insertion_point(field_get:metric.MValue.exceptionCount)
  return exceptioncount_;
}
inline void MValue::set_exceptioncount(::google::protobuf::int64 value) {
  set_has_exceptioncount();
  exceptioncount_ = value;
  // @@protoc_insertion_point(field_set:metric.MValue.exceptionCount)
}

// required int32 rt = 6;
inline bool MValue::has_rt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MValue::set_has_rt() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MValue::clear_has_rt() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MValue::clear_rt() {
  rt_ = 0;
  clear_has_rt();
}
inline ::google::protobuf::int32 MValue::rt() const {
  // @@protoc_insertion_point(field_get:metric.MValue.rt)
  return rt_;
}
inline void MValue::set_rt(::google::protobuf::int32 value) {
  set_has_rt();
  rt_ = value;
  // @@protoc_insertion_point(field_set:metric.MValue.rt)
}

// required int32 max_rt = 7;
inline bool MValue::has_max_rt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MValue::set_has_max_rt() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MValue::clear_has_max_rt() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MValue::clear_max_rt() {
  max_rt_ = 0;
  clear_has_max_rt();
}
inline ::google::protobuf::int32 MValue::max_rt() const {
  // @@protoc_insertion_point(field_get:metric.MValue.max_rt)
  return max_rt_;
}
inline void MValue::set_max_rt(::google::protobuf::int32 value) {
  set_has_max_rt();
  max_rt_ = value;
  // @@protoc_insertion_point(field_set:metric.MValue.max_rt)
}

// required int32 min_rt = 8;
inline bool MValue::has_min_rt() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MValue::set_has_min_rt() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MValue::clear_has_min_rt() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MValue::clear_min_rt() {
  min_rt_ = 0;
  clear_has_min_rt();
}
inline ::google::protobuf::int32 MValue::min_rt() const {
  // @@protoc_insertion_point(field_get:metric.MValue.min_rt)
  return min_rt_;
}
inline void MValue::set_min_rt(::google::protobuf::int32 value) {
  set_has_min_rt();
  min_rt_ = value;
  // @@protoc_insertion_point(field_set:metric.MValue.min_rt)
}

// required int32 p99 = 9;
inline bool MValue::has_p99() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MValue::set_has_p99() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MValue::clear_has_p99() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MValue::clear_p99() {
  p99_ = 0;
  clear_has_p99();
}
inline ::google::protobuf::int32 MValue::p99() const {
  // @@protoc_insertion_point(field_get:metric.MValue.p99)
  return p99_;
}
inline void MValue::set_p99(::google::protobuf::int32 value) {
  set_has_p99();
  p99_ = value;
  // @@protoc_insertion_point(field_set:metric.MValue.p99)
}

// required int32 p95 = 10;
inline bool MValue::has_p95() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MValue::set_has_p95() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MValue::clear_has_p95() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MValue::clear_p95() {
  p95_ = 0;
  clear_has_p95();
}
inline ::google::protobuf::int32 MValue::p95() const {
  // @@protoc_insertion_point(field_get:metric.MValue.p95)
  return p95_;
}
inline void MValue::set_p95(::google::protobuf::int32 value) {
  set_has_p95();
  p95_ = value;
  // @@protoc_insertion_point(field_set:metric.MValue.p95)
}

// -------------------------------------------------------------------

// Metric

// required string sdkVer = 1;
inline bool Metric::has_sdkver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Metric::set_has_sdkver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Metric::clear_has_sdkver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Metric::clear_sdkver() {
  sdkver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sdkver();
}
inline const ::std::string& Metric::sdkver() const {
  // @@protoc_insertion_point(field_get:metric.Metric.sdkVer)
  return sdkver_.GetNoArena();
}
inline void Metric::set_sdkver(const ::std::string& value) {
  set_has_sdkver();
  sdkver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metric.Metric.sdkVer)
}
#if LANG_CXX11
inline void Metric::set_sdkver(::std::string&& value) {
  set_has_sdkver();
  sdkver_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metric.Metric.sdkVer)
}
#endif
inline void Metric::set_sdkver(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sdkver();
  sdkver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metric.Metric.sdkVer)
}
inline void Metric::set_sdkver(const char* value, size_t size) {
  set_has_sdkver();
  sdkver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metric.Metric.sdkVer)
}
inline ::std::string* Metric::mutable_sdkver() {
  set_has_sdkver();
  // @@protoc_insertion_point(field_mutable:metric.Metric.sdkVer)
  return sdkver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Metric::release_sdkver() {
  // @@protoc_insertion_point(field_release:metric.Metric.sdkVer)
  if (!has_sdkver()) {
    return NULL;
  }
  clear_has_sdkver();
  return sdkver_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metric::set_allocated_sdkver(::std::string* sdkver) {
  if (sdkver != NULL) {
    set_has_sdkver();
  } else {
    clear_has_sdkver();
  }
  sdkver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdkver);
  // @@protoc_insertion_point(field_set_allocated:metric.Metric.sdkVer)
}

// required int64 timestamp = 2;
inline bool Metric::has_timestamp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Metric::set_has_timestamp() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Metric::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Metric::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 Metric::timestamp() const {
  // @@protoc_insertion_point(field_get:metric.Metric.timestamp)
  return timestamp_;
}
inline void Metric::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:metric.Metric.timestamp)
}

// required string type = 3;
inline bool Metric::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Metric::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Metric::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Metric::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& Metric::type() const {
  // @@protoc_insertion_point(field_get:metric.Metric.type)
  return type_.GetNoArena();
}
inline void Metric::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metric.Metric.type)
}
#if LANG_CXX11
inline void Metric::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metric.Metric.type)
}
#endif
inline void Metric::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metric.Metric.type)
}
inline void Metric::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metric.Metric.type)
}
inline ::std::string* Metric::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:metric.Metric.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Metric::release_type() {
  // @@protoc_insertion_point(field_release:metric.Metric.type)
  if (!has_type()) {
    return NULL;
  }
  clear_has_type();
  return type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metric::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:metric.Metric.type)
}

// required string component = 4;
inline bool Metric::has_component() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Metric::set_has_component() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Metric::clear_has_component() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Metric::clear_component() {
  component_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_component();
}
inline const ::std::string& Metric::component() const {
  // @@protoc_insertion_point(field_get:metric.Metric.component)
  return component_.GetNoArena();
}
inline void Metric::set_component(const ::std::string& value) {
  set_has_component();
  component_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metric.Metric.component)
}
#if LANG_CXX11
inline void Metric::set_component(::std::string&& value) {
  set_has_component();
  component_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metric.Metric.component)
}
#endif
inline void Metric::set_component(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_component();
  component_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metric.Metric.component)
}
inline void Metric::set_component(const char* value, size_t size) {
  set_has_component();
  component_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metric.Metric.component)
}
inline ::std::string* Metric::mutable_component() {
  set_has_component();
  // @@protoc_insertion_point(field_mutable:metric.Metric.component)
  return component_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Metric::release_component() {
  // @@protoc_insertion_point(field_release:metric.Metric.component)
  if (!has_component()) {
    return NULL;
  }
  clear_has_component();
  return component_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metric::set_allocated_component(::std::string* component) {
  if (component != NULL) {
    set_has_component();
  } else {
    clear_has_component();
  }
  component_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), component);
  // @@protoc_insertion_point(field_set_allocated:metric.Metric.component)
}

// optional string method_name = 5;
inline bool Metric::has_method_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Metric::set_has_method_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Metric::clear_has_method_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Metric::clear_method_name() {
  method_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_method_name();
}
inline const ::std::string& Metric::method_name() const {
  // @@protoc_insertion_point(field_get:metric.Metric.method_name)
  return method_name_.GetNoArena();
}
inline void Metric::set_method_name(const ::std::string& value) {
  set_has_method_name();
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metric.Metric.method_name)
}
#if LANG_CXX11
inline void Metric::set_method_name(::std::string&& value) {
  set_has_method_name();
  method_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metric.Metric.method_name)
}
#endif
inline void Metric::set_method_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_method_name();
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metric.Metric.method_name)
}
inline void Metric::set_method_name(const char* value, size_t size) {
  set_has_method_name();
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metric.Metric.method_name)
}
inline ::std::string* Metric::mutable_method_name() {
  set_has_method_name();
  // @@protoc_insertion_point(field_mutable:metric.Metric.method_name)
  return method_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Metric::release_method_name() {
  // @@protoc_insertion_point(field_release:metric.Metric.method_name)
  if (!has_method_name()) {
    return NULL;
  }
  clear_has_method_name();
  return method_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metric::set_allocated_method_name(::std::string* method_name) {
  if (method_name != NULL) {
    set_has_method_name();
  } else {
    clear_has_method_name();
  }
  method_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method_name);
  // @@protoc_insertion_point(field_set_allocated:metric.Metric.method_name)
}

// optional string service_name = 6;
inline bool Metric::has_service_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Metric::set_has_service_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Metric::clear_has_service_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Metric::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_service_name();
}
inline const ::std::string& Metric::service_name() const {
  // @@protoc_insertion_point(field_get:metric.Metric.service_name)
  return service_name_.GetNoArena();
}
inline void Metric::set_service_name(const ::std::string& value) {
  set_has_service_name();
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metric.Metric.service_name)
}
#if LANG_CXX11
inline void Metric::set_service_name(::std::string&& value) {
  set_has_service_name();
  service_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metric.Metric.service_name)
}
#endif
inline void Metric::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_service_name();
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metric.Metric.service_name)
}
inline void Metric::set_service_name(const char* value, size_t size) {
  set_has_service_name();
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metric.Metric.service_name)
}
inline ::std::string* Metric::mutable_service_name() {
  set_has_service_name();
  // @@protoc_insertion_point(field_mutable:metric.Metric.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Metric::release_service_name() {
  // @@protoc_insertion_point(field_release:metric.Metric.service_name)
  if (!has_service_name()) {
    return NULL;
  }
  clear_has_service_name();
  return service_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metric::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    set_has_service_name();
  } else {
    clear_has_service_name();
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:metric.Metric.service_name)
}

// optional string domain = 7;
inline bool Metric::has_domain() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Metric::set_has_domain() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Metric::clear_has_domain() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Metric::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_domain();
}
inline const ::std::string& Metric::domain() const {
  // @@protoc_insertion_point(field_get:metric.Metric.domain)
  return domain_.GetNoArena();
}
inline void Metric::set_domain(const ::std::string& value) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metric.Metric.domain)
}
#if LANG_CXX11
inline void Metric::set_domain(::std::string&& value) {
  set_has_domain();
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metric.Metric.domain)
}
#endif
inline void Metric::set_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metric.Metric.domain)
}
inline void Metric::set_domain(const char* value, size_t size) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metric.Metric.domain)
}
inline ::std::string* Metric::mutable_domain() {
  set_has_domain();
  // @@protoc_insertion_point(field_mutable:metric.Metric.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Metric::release_domain() {
  // @@protoc_insertion_point(field_release:metric.Metric.domain)
  if (!has_domain()) {
    return NULL;
  }
  clear_has_domain();
  return domain_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metric::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    set_has_domain();
  } else {
    clear_has_domain();
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:metric.Metric.domain)
}

// optional string sign = 8;
inline bool Metric::has_sign() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Metric::set_has_sign() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Metric::clear_has_sign() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Metric::clear_sign() {
  sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sign();
}
inline const ::std::string& Metric::sign() const {
  // @@protoc_insertion_point(field_get:metric.Metric.sign)
  return sign_.GetNoArena();
}
inline void Metric::set_sign(const ::std::string& value) {
  set_has_sign();
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metric.Metric.sign)
}
#if LANG_CXX11
inline void Metric::set_sign(::std::string&& value) {
  set_has_sign();
  sign_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metric.Metric.sign)
}
#endif
inline void Metric::set_sign(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sign();
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metric.Metric.sign)
}
inline void Metric::set_sign(const char* value, size_t size) {
  set_has_sign();
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metric.Metric.sign)
}
inline ::std::string* Metric::mutable_sign() {
  set_has_sign();
  // @@protoc_insertion_point(field_mutable:metric.Metric.sign)
  return sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Metric::release_sign() {
  // @@protoc_insertion_point(field_release:metric.Metric.sign)
  if (!has_sign()) {
    return NULL;
  }
  clear_has_sign();
  return sign_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metric::set_allocated_sign(::std::string* sign) {
  if (sign != NULL) {
    set_has_sign();
  } else {
    clear_has_sign();
  }
  sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:metric.Metric.sign)
}

// required string span_id = 9;
inline bool Metric::has_span_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Metric::set_has_span_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Metric::clear_has_span_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Metric::clear_span_id() {
  span_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_span_id();
}
inline const ::std::string& Metric::span_id() const {
  // @@protoc_insertion_point(field_get:metric.Metric.span_id)
  return span_id_.GetNoArena();
}
inline void Metric::set_span_id(const ::std::string& value) {
  set_has_span_id();
  span_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metric.Metric.span_id)
}
#if LANG_CXX11
inline void Metric::set_span_id(::std::string&& value) {
  set_has_span_id();
  span_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metric.Metric.span_id)
}
#endif
inline void Metric::set_span_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_span_id();
  span_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metric.Metric.span_id)
}
inline void Metric::set_span_id(const char* value, size_t size) {
  set_has_span_id();
  span_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metric.Metric.span_id)
}
inline ::std::string* Metric::mutable_span_id() {
  set_has_span_id();
  // @@protoc_insertion_point(field_mutable:metric.Metric.span_id)
  return span_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Metric::release_span_id() {
  // @@protoc_insertion_point(field_release:metric.Metric.span_id)
  if (!has_span_id()) {
    return NULL;
  }
  clear_has_span_id();
  return span_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metric::set_allocated_span_id(::std::string* span_id) {
  if (span_id != NULL) {
    set_has_span_id();
  } else {
    clear_has_span_id();
  }
  span_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), span_id);
  // @@protoc_insertion_point(field_set_allocated:metric.Metric.span_id)
}

// required .span.EndPoint endpoint = 10;
inline bool Metric::has_endpoint() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Metric::set_has_endpoint() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Metric::clear_has_endpoint() {
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::span::EndPoint& Metric::_internal_endpoint() const {
  return *endpoint_;
}
inline const ::span::EndPoint& Metric::endpoint() const {
  const ::span::EndPoint* p = endpoint_;
  // @@protoc_insertion_point(field_get:metric.Metric.endpoint)
  return p != NULL ? *p : *reinterpret_cast<const ::span::EndPoint*>(
      &::span::_EndPoint_default_instance_);
}
inline ::span::EndPoint* Metric::release_endpoint() {
  // @@protoc_insertion_point(field_release:metric.Metric.endpoint)
  clear_has_endpoint();
  ::span::EndPoint* temp = endpoint_;
  endpoint_ = NULL;
  return temp;
}
inline ::span::EndPoint* Metric::mutable_endpoint() {
  set_has_endpoint();
  if (endpoint_ == NULL) {
    auto* p = CreateMaybeMessage<::span::EndPoint>(GetArenaNoVirtual());
    endpoint_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metric.Metric.endpoint)
  return endpoint_;
}
inline void Metric::set_allocated_endpoint(::span::EndPoint* endpoint) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(endpoint_);
  }
  if (endpoint) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      endpoint = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, endpoint, submessage_arena);
    }
    set_has_endpoint();
  } else {
    clear_has_endpoint();
  }
  endpoint_ = endpoint;
  // @@protoc_insertion_point(field_set_allocated:metric.Metric.endpoint)
}

// required .span.AttachInfo attachInfo = 11;
inline bool Metric::has_attachinfo() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Metric::set_has_attachinfo() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Metric::clear_has_attachinfo() {
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::span::AttachInfo& Metric::_internal_attachinfo() const {
  return *attachinfo_;
}
inline const ::span::AttachInfo& Metric::attachinfo() const {
  const ::span::AttachInfo* p = attachinfo_;
  // @@protoc_insertion_point(field_get:metric.Metric.attachInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::span::AttachInfo*>(
      &::span::_AttachInfo_default_instance_);
}
inline ::span::AttachInfo* Metric::release_attachinfo() {
  // @@protoc_insertion_point(field_release:metric.Metric.attachInfo)
  clear_has_attachinfo();
  ::span::AttachInfo* temp = attachinfo_;
  attachinfo_ = NULL;
  return temp;
}
inline ::span::AttachInfo* Metric::mutable_attachinfo() {
  set_has_attachinfo();
  if (attachinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::span::AttachInfo>(GetArenaNoVirtual());
    attachinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metric.Metric.attachInfo)
  return attachinfo_;
}
inline void Metric::set_allocated_attachinfo(::span::AttachInfo* attachinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(attachinfo_);
  }
  if (attachinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      attachinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, attachinfo, submessage_arena);
    }
    set_has_attachinfo();
  } else {
    clear_has_attachinfo();
  }
  attachinfo_ = attachinfo;
  // @@protoc_insertion_point(field_set_allocated:metric.Metric.attachInfo)
}

// optional .metric.MValue mvalue = 12;
inline bool Metric::has_mvalue() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Metric::set_has_mvalue() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Metric::clear_has_mvalue() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Metric::clear_mvalue() {
  if (mvalue_ != NULL) mvalue_->Clear();
  clear_has_mvalue();
}
inline const ::metric::MValue& Metric::_internal_mvalue() const {
  return *mvalue_;
}
inline const ::metric::MValue& Metric::mvalue() const {
  const ::metric::MValue* p = mvalue_;
  // @@protoc_insertion_point(field_get:metric.Metric.mvalue)
  return p != NULL ? *p : *reinterpret_cast<const ::metric::MValue*>(
      &::metric::_MValue_default_instance_);
}
inline ::metric::MValue* Metric::release_mvalue() {
  // @@protoc_insertion_point(field_release:metric.Metric.mvalue)
  clear_has_mvalue();
  ::metric::MValue* temp = mvalue_;
  mvalue_ = NULL;
  return temp;
}
inline ::metric::MValue* Metric::mutable_mvalue() {
  set_has_mvalue();
  if (mvalue_ == NULL) {
    auto* p = CreateMaybeMessage<::metric::MValue>(GetArenaNoVirtual());
    mvalue_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metric.Metric.mvalue)
  return mvalue_;
}
inline void Metric::set_allocated_mvalue(::metric::MValue* mvalue) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mvalue_;
  }
  if (mvalue) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mvalue = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mvalue, submessage_arena);
    }
    set_has_mvalue();
  } else {
    clear_has_mvalue();
  }
  mvalue_ = mvalue;
  // @@protoc_insertion_point(field_set_allocated:metric.Metric.mvalue)
}

// repeated .span.TagEntry tags = 13;
inline int Metric::tags_size() const {
  return tags_.size();
}
inline ::span::TagEntry* Metric::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:metric.Metric.tags)
  return tags_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::span::TagEntry >*
Metric::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:metric.Metric.tags)
  return &tags_;
}
inline const ::span::TagEntry& Metric::tags(int index) const {
  // @@protoc_insertion_point(field_get:metric.Metric.tags)
  return tags_.Get(index);
}
inline ::span::TagEntry* Metric::add_tags() {
  // @@protoc_insertion_point(field_add:metric.Metric.tags)
  return tags_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::span::TagEntry >&
Metric::tags() const {
  // @@protoc_insertion_point(field_list:metric.Metric.tags)
  return tags_;
}

// repeated .span.TagEntry dimension_tags = 14;
inline int Metric::dimension_tags_size() const {
  return dimension_tags_.size();
}
inline ::span::TagEntry* Metric::mutable_dimension_tags(int index) {
  // @@protoc_insertion_point(field_mutable:metric.Metric.dimension_tags)
  return dimension_tags_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::span::TagEntry >*
Metric::mutable_dimension_tags() {
  // @@protoc_insertion_point(field_mutable_list:metric.Metric.dimension_tags)
  return &dimension_tags_;
}
inline const ::span::TagEntry& Metric::dimension_tags(int index) const {
  // @@protoc_insertion_point(field_get:metric.Metric.dimension_tags)
  return dimension_tags_.Get(index);
}
inline ::span::TagEntry* Metric::add_dimension_tags() {
  // @@protoc_insertion_point(field_add:metric.Metric.dimension_tags)
  return dimension_tags_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::span::TagEntry >&
Metric::dimension_tags() const {
  // @@protoc_insertion_point(field_list:metric.Metric.dimension_tags)
  return dimension_tags_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace metric

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_metric_2eproto
